"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[2602],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),k=a,c=d["".concat(i,".").concat(k)]||d[k]||m[k]||l;return n?r.createElement(c,o(o({ref:t},u),{},{components:n})):r.createElement(c,o({ref:t},u))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=k;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<l;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},3019:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const l={sidebar_position:2},o="Bot Api Spec",s={unversionedId:"api-specification/botAPISpec",id:"api-specification/botAPISpec",title:"Bot Api Spec",description:"Introduction",source:"@site/docs/api-specification/botAPISpec.md",sourceDirName:"api-specification",slug:"/api-specification/botAPISpec",permalink:"/project-bereal-meets-slack/docs/api-specification/botAPISpec",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Fall/project-bereal-meets-slack/edit/main/documentation/docs/api-specification/botAPISpec.md",tags:[],version:"current",lastUpdatedBy:"tup31461",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Api Spec Document",permalink:"/project-bereal-meets-slack/docs/api-specification/design-api-intro"},next:{title:"API 1 - Swagger Petstore",permalink:"/project-bereal-meets-slack/docs/api-specification/openapi-spec"}},i={},p=[{value:"getRandomUser",id:"getrandomuser",level:2},{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"getRandomUser",id:"getrandomuser-1",level:2},{value:"Description",id:"description-1",level:3},{value:"Parameters",id:"parameters-1",level:3},{value:"Returns",id:"returns-1",level:3},{value:"Description",id:"description-2",level:3},{value:"Parameters",id:"parameters-2",level:3},{value:"Returns",id:"returns-2",level:3},{value:"<code>fetchActiveHoursFromDB(guildId)</code>",id:"fetchactivehoursfromdbguildid",level:3},{value:"(async) fetchActiveHoursFromDB(guildId) \u2192 {Promise.&lt;{start_time: string, end_time: string}&gt;}",id:"async-fetchactivehoursfromdbguildid--promisestart_time-string-end_time-string",level:4},{value:"Parameters:",id:"parameters-3",level:5},{value:"<code>fetchActiveHoursFromDB(guildId)</code>",id:"fetchactivehoursfromdbguildid-1",level:4},{value:"Returns:",id:"returns-3",level:4},{value:"<code>getRandomHourWithinActiveHours(activeHoursData)</code>",id:"getrandomhourwithinactivehoursactivehoursdata",level:3},{value:"<code>getRandomHourWithinActiveHours(activeHoursData) \u2192 {string}</code>",id:"getrandomhourwithinactivehoursactivehoursdata--string",level:4},{value:"Parameters:",id:"parameters-4",level:5},{value:"Returns:",id:"returns-4",level:5}],u={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"bot-api-spec"},"Bot Api Spec"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Introduction"),"\nThis outlines the API specification for the Bot. It provides details on the methods available, their parameters, return values, and the usage."),(0,a.kt)("h2",{id:"getrandomuser"},"getRandomUser"),(0,a.kt)("h3",{id:"description"},"Description"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"getRandomUser")," function is used to retrieve a random non-bot user from a Discord guild. It excludes users who are blacklisted and bots. The function ensures that there is at least one eligible non-bot user in the guild."),(0,a.kt)("h3",{id:"parameters"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"guild"),": The Discord guild for which the random user needs to be retrieved.")),(0,a.kt)("h3",{id:"returns"},"Returns"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"string")," | ",(0,a.kt)("inlineCode",{parentName:"li"},"null")),(0,a.kt)("li",{parentName:"ul"},"Description: The function returns the user ID of a randomly selected non-bot user in the guild. If no eligible non-bot users are found, it returns ",(0,a.kt)("inlineCode",{parentName:"li"},"null"),".")),(0,a.kt)("h2",{id:"getrandomuser-1"},"getRandomUser"),(0,a.kt)("h3",{id:"description-1"},"Description"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"getRandomUser")," function is used to retrieve a random non-bot user from a Discord guild. It excludes users who are blacklisted and bots. The function ensures that there is at least one eligible non-bot user in the guild."),(0,a.kt)("h3",{id:"parameters-1"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"guild"),": The Discord guild for which the random user needs to be retrieved.")),(0,a.kt)("h3",{id:"returns-1"},"Returns"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Type: ",(0,a.kt)("inlineCode",{parentName:"p"},"string")," | ",(0,a.kt)("inlineCode",{parentName:"p"},"null"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Description: The function returns the user ID of a randomly selected non-bot user in the guild. If no eligible non-bot users are found, it returns ",(0,a.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,a.kt)("h2",{parentName:"li",id:"getrandomuser-2"},"getRandomUser"))),(0,a.kt)("h3",{id:"description-2"},"Description"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"getRandomUser")," function is used to retrieve a random non-bot user from a Discord guild. It excludes users who are blacklisted and bots. The function ensures that there is at least one eligible non-bot user in the guild."),(0,a.kt)("h3",{id:"parameters-2"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"guild"),": The Discord guild for which the random user needs to be retrieved.")),(0,a.kt)("h3",{id:"returns-2"},"Returns"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"string")," | ",(0,a.kt)("inlineCode",{parentName:"li"},"null")),(0,a.kt)("li",{parentName:"ul"},"Description: The function returns the user ID of a randomly selected non-bot user in the guild. If no eligible non-bot users are found, it returns ",(0,a.kt)("inlineCode",{parentName:"li"},"null"),".")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Bot Methods")),(0,a.kt)("h3",{id:"fetchactivehoursfromdbguildid"},(0,a.kt)("inlineCode",{parentName:"h3"},"fetchActiveHoursFromDB(guildId)")),(0,a.kt)("h4",{id:"async-fetchactivehoursfromdbguildid--promisestart_time-string-end_time-string"},"(async) fetchActiveHoursFromDB(guildId) \u2192 {Promise.<{start_time: string, end_time: string}>}"),(0,a.kt)("p",null,"Fetches active operating hours for a guild from the database."),(0,a.kt)("h5",{id:"parameters-3"},"Parameters:"),(0,a.kt)("h4",{id:"fetchactivehoursfromdbguildid-1"},(0,a.kt)("inlineCode",{parentName:"h4"},"fetchActiveHoursFromDB(guildId)")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"guildId")),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")))),(0,a.kt)("h4",{id:"returns-3"},"Returns:"),(0,a.kt)("p",null,"A Promise that resolves to an object with ",(0,a.kt)("inlineCode",{parentName:"p"},"start_time")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"end_time")," properties."),(0,a.kt)("h3",{id:"getrandomhourwithinactivehoursactivehoursdata"},(0,a.kt)("inlineCode",{parentName:"h3"},"getRandomHourWithinActiveHours(activeHoursData)")),(0,a.kt)("h4",{id:"getrandomhourwithinactivehoursactivehoursdata--string"},(0,a.kt)("inlineCode",{parentName:"h4"},"getRandomHourWithinActiveHours(activeHoursData) \u2192 {string}")),(0,a.kt)("p",null,"Generates a random hour within the active operating hours for a guild."),(0,a.kt)("h5",{id:"parameters-4"},"Parameters:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"activeHoursData")),(0,a.kt)("td",{parentName:"tr",align:null},"Object"),(0,a.kt)("td",{parentName:"tr",align:null},"An object containing ",(0,a.kt)("inlineCode",{parentName:"td"},"start_time")," and ",(0,a.kt)("inlineCode",{parentName:"td"},"end_time"),".")))),(0,a.kt)("h5",{id:"returns-4"},"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"A formatted string representing a random hour within the active hours."),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("inlineCode",{parentName:"p"},"string")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"getCSV()"),"  "),(0,a.kt)("p",null,"Description: Gets the CSV fields"),(0,a.kt)("p",null,"Parameters: None"),(0,a.kt)("p",null,"Data Types: None"),(0,a.kt)("p",null,"Return Value: CSV fields (e.g., a list or string)"),(0,a.kt)("p",null,"Output Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"getDatavis()")),(0,a.kt)("p",null,"Description:Checks for CSV fields by parsing lines from a file"),(0,a.kt)("p",null,"Parameters: None or a file path"),(0,a.kt)("p",null,"Data Types: String (file path)"),(0,a.kt)("p",null,"Return Value: Parsed CSV fields or data visualization"),(0,a.kt)("p",null,"Output Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"getOperatingHours()")),(0,a.kt)("p",null,"Description:Gets the operation hours of the bot"),(0,a.kt)("p",null,"Parameters: None"),(0,a.kt)("p",null,"Data Types: None"),(0,a.kt)("p",null,"Return Value: Operating hours (e.g., start and end times)"),(0,a.kt)("p",null,"Output Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"sendPrompt()")),(0,a.kt)("p",null,"Description:Sends a prompt to a user"),(0,a.kt)("p",null,"Parameters: User ID or message content"),(0,a.kt)("p",null,"Data Types: String (User ID) or message data"),(0,a.kt)("p",null,"Return Value: Status of the prompt being sent (e.g., success or failure)"),(0,a.kt)("p",null,"Output Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"getResponseDelay()")),(0,a.kt)("p",null,"Description:Gets the time it takes when the bot has to resend a prompt to the user"),(0,a.kt)("p",null,"Parameters: None"),(0,a.kt)("p",null,"Data Types: None"),(0,a.kt)("p",null,"Return Value: Response delay time (e.g., integer or float)"),(0,a.kt)("p",null,"Output Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"getResponse()")),(0,a.kt)("p",null,"Description: Gets response from the user"),(0,a.kt)("p",null,"Parameters: None"),(0,a.kt)("p",null,"Data Types: None"),(0,a.kt)("p",null,"Return Value: User response (e.g., string)"),(0,a.kt)("p",null,"Output Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"setOperatingHours(int newStart, int newEnd)")),(0,a.kt)("p",null,"Description:Sets the operating hours"),(0,a.kt)("p",null,"Parameters: New start and end times (integer)"),(0,a.kt)("p",null,"Data Types: Integer (newStart and newEnd)"),(0,a.kt)("p",null,"Return Value: Status of operating hours update"),(0,a.kt)("p",null,"Output Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"generateRandomPromptTime()")),(0,a.kt)("p",null,"Description:Generates a random time for when prompts are assigned"),(0,a.kt)("p",null,"Parameters: None"),(0,a.kt)("p",null,"Data Types: None"),(0,a.kt)("p",null,"Return Value: Random prompt assignment time (e.g., timestamp)"),(0,a.kt)("p",null,"Output Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"generateRandomPrompt()")),(0,a.kt)("p",null,"Description:  Generates a random prompt"),(0,a.kt)("p",null,"Parameters: None"),(0,a.kt)("p",null,"Data Types: None"),(0,a.kt)("p",null,"Return Value: Randomly generated prompt (e.g., string)"),(0,a.kt)("p",null,"Output Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"getPromptList()")),(0,a.kt)("p",null,"Description: Gets the prompt list"),(0,a.kt)("p",null,"Parameters: None"),(0,a.kt)("p",null,"Data Types: None"),(0,a.kt)("p",null,"Return Value: List of prompts"),(0,a.kt)("p",null,"Output Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"setPromptList()")),(0,a.kt)("p",null,"Description: Sets the prompt list "),(0,a.kt)("p",null,"Parameters: List of prompts"),(0,a.kt)("p",null,"Data Types: List of strings"),(0,a.kt)("p",null,"Return Value: Status of prompt list update"),(0,a.kt)("p",null,"Output Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"getResponsePostComment()")),(0,a.kt)("p",null,"Description: Gets and stores the response of a post comment"),(0,a.kt)("p",null,"Parameters: None"),(0,a.kt)("p",null,"Data Types: None"),(0,a.kt)("p",null,"Return Value: User response to a post comment (e.g., string)"),(0,a.kt)("p",null,"Output Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"setResponsePostComment()")),(0,a.kt)("p",null,"Description:  Sets a response of a post comment"),(0,a.kt)("p",null,"Parameters: User response to a post comment (e.g., string)"),(0,a.kt)("p",null,"Data Types: String"),(0,a.kt)("p",null,"Return Value: Status of response update"),(0,a.kt)("p",null,"Output Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"getBlackList()")),(0,a.kt)("p",null,"Description: Shows the blacklist"),(0,a.kt)("p",null,"Parameters: None"),(0,a.kt)("p",null,"Data Types: None"),(0,a.kt)("p",null,"Return Value: List of blacklisted users"),(0,a.kt)("p",null,"Output Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"addUserToBlackList()")),(0,a.kt)("p",null,"Description: Adds users to the blacklist"),(0,a.kt)("p",null,"Parameters: User ID or username"),(0,a.kt)("p",null,"Data Types: String"),(0,a.kt)("p",null,"Return Value: Status of user addition to the blacklist"),(0,a.kt)("p",null,"Output Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"removeUserFromBlackList()")),(0,a.kt)("p",null,"Description: Removes a user from the blacklist"),(0,a.kt)("p",null,"Parameters: User ID or username"),(0,a.kt)("p",null,"Data Types: String"),(0,a.kt)("p",null,"Return Value: Status of user removal from the blacklist"),(0,a.kt)("p",null,"Output Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"selectRandomUserToPrompt()")),(0,a.kt)("p",null,"Description: Selects a random user to assign a prompt to"),(0,a.kt)("p",null,"Parameters: None"),(0,a.kt)("p",null,"Data Types: None"),(0,a.kt)("p",null,"Return Value: Selected user for prompt assignment (e.g., User ID or username)"),(0,a.kt)("p",null,"Output Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"getApprovalStatus()")),(0,a.kt)("p",null,"Description:Gets the approval status after sending a user response to the moderator"),(0,a.kt)("p",null,"Parameters: None"),(0,a.kt)("p",null,"Data Types: None"),(0,a.kt)("p",null,"Return Value: Approval status (e.g., boolean)"),(0,a.kt)("p",null,"Output Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"setApprovalStatus()")),(0,a.kt)("p",null,"Description: Sets the approval status after sending a user response to a moderator"),(0,a.kt)("p",null,"Parameters: Approval status (e.g., boolean)"),(0,a.kt)("p",null,"Data Types: Boolean"),(0,a.kt)("p",null,"Return Value: Status of approval status update"),(0,a.kt)("p",null,"Output Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"sendToResponseToMod()")),(0,a.kt)("p",null,"Description: Sends a user response to a prompt to a moderator"),(0,a.kt)("p",null,"Parameters: User response to a prompt"),(0,a.kt)("p",null,"Data Types: String"),(0,a.kt)("p",null,"Return Value: Status of sending to the moderator"),(0,a.kt)("p",null,"Output Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"postResponseToChannel()")),(0,a.kt)("p",null,"Description: Posts the response of a moderator to a user to a channel"),(0,a.kt)("p",null,"Parameters: Moderator's response to a user"),(0,a.kt)("p",null,"Data Types: String"),(0,a.kt)("p",null,"Return Value: Status of posting to a channel"),(0,a.kt)("p",null,"Output Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"deleteOriginalPromptFromChannel()")),(0,a.kt)("p",null,"Description:Deletes a prompt from a certain channel"),(0,a.kt)("p",null,"Parameters: Channel or prompt ID"),(0,a.kt)("p",null,"Data Types: String or identifier"),(0,a.kt)("p",null,"Return Value: Status of prompt deletion from the channel"),(0,a.kt)("p",null,"Output Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"setUsersAlreadyPromptedList()")),(0,a.kt)("p",null,"Description:  Sets a list of users that were already prompted by the bot"),(0,a.kt)("p",null,"Parameters: List of users"),(0,a.kt)("p",null,"Data Types: List of user IDs or usernames"),(0,a.kt)("p",null,"Return Value: Status of updating the list"),(0,a.kt)("p",null,"Output Variables: None"))}d.isMDXComponent=!0}}]);