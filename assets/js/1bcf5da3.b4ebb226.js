"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[6863],{3905:(e,t,r)=>{r.d(t,{Zo:()=>o,kt:()=>k});var l=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,l)}return r}function n(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,l,a=function(e,t){if(null==e)return{};var r,l,a={},i=Object.keys(e);for(l=0;l<i.length;l++)r=i[l],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)r=i[l],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var d=l.createContext({}),u=function(e){var t=l.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):n(n({},t),e)),r},o=function(e){var t=u(e.components);return l.createElement(d.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},m=l.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,o=s(e,["components","mdxType","originalType","parentName"]),p=u(r),m=a,k=p["".concat(d,".").concat(m)]||p[m]||c[m]||i;return r?l.createElement(k,n(n({ref:t},o),{},{components:r})):l.createElement(k,n({ref:t},o))}));function k(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,n=new Array(i);n[0]=m;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[p]="string"==typeof e?e:a,n[1]=s;for(var u=2;u<i;u++)n[u]=r[u];return l.createElement.apply(null,n)}return l.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6311:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>n,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var l=r(7462),a=(r(7294),r(3905));const i={sidebar_position:5},n="Blacklist Utility Module Spec",s={unversionedId:"api-specification/blacklistUtilsSpec",id:"api-specification/blacklistUtilsSpec",title:"Blacklist Utility Module Spec",description:"Methods",source:"@site/docs/api-specification/blacklistUtilsSpec.md",sourceDirName:"api-specification",slug:"/api-specification/blacklistUtilsSpec",permalink:"/project-bereal-meets-slack/docs/api-specification/blacklistUtilsSpec",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Fall/project-bereal-meets-slack/edit/main/documentation/docs/api-specification/blacklistUtilsSpec.md",tags:[],version:"current",lastUpdatedBy:"tup31461",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docsSidebar",previous:{title:"Active Hours Utility Module Spec",permalink:"/project-bereal-meets-slack/docs/api-specification/activeHoursSpec"},next:{title:"Data Graph Utility Module Spec",permalink:"/project-bereal-meets-slack/docs/api-specification/dataGraphSpec"}},d={},u=[{value:"Methods",id:"methods",level:2},{value:"<code>blacklistAddUser(guildId, dbuser)</code>",id:"blacklistadduserguildid-dbuser",level:3},{value:"<code>blacklistAddUser(guildId, dbuser) \u2192 {Promise&lt;number&gt;}</code>",id:"blacklistadduserguildid-dbuser--promisenumber",level:4},{value:"Parameters:",id:"parameters",level:5},{value:"Returns:",id:"returns",level:5},{value:"<code>blacklistDeleteUser(guildId, dbuser)</code>",id:"blacklistdeleteuserguildid-dbuser",level:3},{value:"<code>blacklistDeleteUser(guildId, dbuser) \u2192 {Promise.&lt;number&gt;}</code>",id:"blacklistdeleteuserguildid-dbuser--promisenumber",level:4},{value:"Parameters:",id:"parameters-1",level:5},{value:"Returns:",id:"returns-1",level:5},{value:"<code>blacklistListUsers(guildId)</code>",id:"blacklistlistusersguildid",level:3},{value:"<code>blacklistListUsers(guildId) \u2192 {Promise.&lt;Array.&lt;string&gt;&gt;}</code>",id:"blacklistlistusersguildid--promisearraystring",level:4},{value:"Parameters:",id:"parameters-2",level:5},{value:"Returns:",id:"returns-2",level:5}],o={toc:u};function p(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,l.Z)({},o,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"blacklist-utility-module-spec"},"Blacklist Utility Module Spec"),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("h3",{id:"blacklistadduserguildid-dbuser"},(0,a.kt)("inlineCode",{parentName:"h3"},"blacklistAddUser(guildId, dbuser)")),(0,a.kt)("h4",{id:"blacklistadduserguildid-dbuser--promisenumber"},(0,a.kt)("inlineCode",{parentName:"h4"},"blacklistAddUser(guildId, dbuser) \u2192 {Promise<number>}")),(0,a.kt)("p",null,"Adds a user to the blacklist for a guild."),(0,a.kt)("h5",{id:"parameters"},"Parameters:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"guildId")),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"dbuser")),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"The user ID to be blacklisted.")))),(0,a.kt)("h5",{id:"returns"},"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"A Promise resolving to:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0")," if the user was successfully added to the blacklist."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1")," if the user is already blacklisted."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"2")," if an error occurred during the operation.")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise<number>")))),(0,a.kt)("h3",{id:"blacklistdeleteuserguildid-dbuser"},(0,a.kt)("inlineCode",{parentName:"h3"},"blacklistDeleteUser(guildId, dbuser)")),(0,a.kt)("h4",{id:"blacklistdeleteuserguildid-dbuser--promisenumber"},(0,a.kt)("inlineCode",{parentName:"h4"},"blacklistDeleteUser(guildId, dbuser) \u2192 {Promise.<number>}")),(0,a.kt)("p",null,"Deletes a user from the blacklist for a guild."),(0,a.kt)("h5",{id:"parameters-1"},"Parameters:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"guildId")),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"dbuser")),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"The user ID to be removed from the blacklist.")))),(0,a.kt)("h5",{id:"returns-1"},"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A Promise resolving to:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0")," if the user is successfully deleted."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1")," if no user is deleted")))),(0,a.kt)("p",null,"  ",(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise.<number>")),(0,a.kt)("h3",{id:"blacklistlistusersguildid"},(0,a.kt)("inlineCode",{parentName:"h3"},"blacklistListUsers(guildId)")),(0,a.kt)("h4",{id:"blacklistlistusersguildid--promisearraystring"},(0,a.kt)("inlineCode",{parentName:"h4"},"blacklistListUsers(guildId) \u2192 {Promise.<Array.<string>>}")),(0,a.kt)("p",null,"Fetches and returns a list of blacklisted users in a guild."),(0,a.kt)("h5",{id:"parameters-2"},"Parameters:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"guildId")),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")))),(0,a.kt)("h5",{id:"returns-2"},"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"A promise that resolves to an array of formatted user mentions (",(0,a.kt)("inlineCode",{parentName:"p"},"<@user_id>"),")."),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Type:")," ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise.<Array.<string>>")))))}p.isMDXComponent=!0}}]);