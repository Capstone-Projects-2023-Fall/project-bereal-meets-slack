"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[2602],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(n),c=r,k=d["".concat(s,".").concat(c)]||d[c]||m[c]||l;return n?a.createElement(k,o(o({ref:t},u),{},{components:n})):a.createElement(k,o({ref:t},u))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3019:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const l={sidebar_position:2},o="Bot Api Spec",i={unversionedId:"api-specification/botAPISpec",id:"api-specification/botAPISpec",title:"Bot Api Spec",description:"Introduction",source:"@site/docs/api-specification/botAPISpec.md",sourceDirName:"api-specification",slug:"/api-specification/botAPISpec",permalink:"/project-bereal-meets-slack/docs/api-specification/botAPISpec",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Fall/project-bereal-meets-slack/edit/main/documentation/docs/api-specification/botAPISpec.md",tags:[],version:"current",lastUpdatedBy:"Rishi Duggal",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Api Spec Document",permalink:"/project-bereal-meets-slack/docs/api-specification/design-api-intro"},next:{title:"API 1 - Swagger Petstore",permalink:"/project-bereal-meets-slack/docs/api-specification/openapi-spec"}},s={},p=[{value:"getRandom Methods",id:"getrandom-methods",level:2},{value:"<code>getRandomUser(guild)</code>",id:"getrandomuserguild",level:3},{value:"<code>getRandomUser(guild) \u2192 {string | null}</code>",id:"getrandomuserguild--string--null",level:4},{value:"Parameters:",id:"parameters",level:5},{value:"Returns:",id:"returns",level:5},{value:"activeHours Methods",id:"activehours-methods",level:2},{value:"<code>fetchActiveHoursFromDB(guildId)</code>",id:"fetchactivehoursfromdbguildid",level:3},{value:"<code>(async) fetchActiveHoursFromDB(guildId) \u2192 {Promise.&lt;{start_time: string, end_time: string}&gt;}</code>",id:"async-fetchactivehoursfromdbguildid--promisestart_time-string-end_time-string",level:4},{value:"Parameters:",id:"parameters-1",level:5},{value:"Returns:",id:"returns-1",level:5},{value:"<code>storeOperatingHours(guildId, startTime, endTime)</code>",id:"storeoperatinghoursguildid-starttime-endtime",level:3},{value:"<code>(async) storeOperatingHours(guildId, startTime, endTime) \u2192 {Promise.&lt;void&gt;}</code>",id:"async-storeoperatinghoursguildid-starttime-endtime--promisevoid",level:4},{value:"Parameters:",id:"parameters-2",level:5},{value:"Returns:",id:"returns-2",level:5},{value:"<code>getRandomHourWithinActiveHours(activeHoursData)</code>",id:"getrandomhourwithinactivehoursactivehoursdata",level:3},{value:"<code>getRandomHourWithinActiveHours(activeHoursData) \u2192 {string}</code>",id:"getrandomhourwithinactivehoursactivehoursdata--string",level:4},{value:"Parameters:",id:"parameters-3",level:5},{value:"Returns:",id:"returns-3",level:5},{value:"dbConn Methods",id:"dbconn-methods",level:2},{value:"<code>createConnectionPoolLocal()</code>",id:"createconnectionpoollocal",level:3},{value:"<code>createConnectionPoolLocal() \u2192 {Object}</code>",id:"createconnectionpoollocal--object",level:4},{value:"Returns:",id:"returns-4",level:5},{value:"<code>createConnectionPoolCloud()</code>",id:"createconnectionpoolcloud",level:3},{value:"<code>createConnectionPoolCloud() \u2192 {Object}</code>",id:"createconnectionpoolcloud--object",level:4},{value:"Returns:",id:"returns-5",level:5},{value:"<code>createPromiseConnectionPool()</code>",id:"createpromiseconnectionpool",level:3},{value:"<code>createPromiseConnectionPool() \u2192 {Object}</code>",id:"createpromiseconnectionpool--object",level:4},{value:"Returns:",id:"returns-6",level:5},{value:"activeHours Methods",id:"activehours-methods-1",level:2},{value:"<code>fetchActiveHoursFromDB(guildId)</code>",id:"fetchactivehoursfromdbguildid-1",level:3},{value:"<code>(async) fetchActiveHoursFromDB(guildId) \u2192 {Promise.&lt;{start_time: string, end_time: string}&gt;}</code>",id:"async-fetchactivehoursfromdbguildid--promisestart_time-string-end_time-string-1",level:4},{value:"Parameters:",id:"parameters-4",level:5},{value:"Returns:",id:"returns-7",level:5}],u={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"bot-api-spec"},"Bot Api Spec"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Introduction"),"\nThis outlines the API specification for the Bot. It provides details on the methods available, their parameters, return values, and the usage."),(0,r.kt)("h2",{id:"getrandom-methods"},"getRandom Methods"),(0,r.kt)("h3",{id:"getrandomuserguild"},(0,r.kt)("inlineCode",{parentName:"h3"},"getRandomUser(guild)")),(0,r.kt)("h4",{id:"getrandomuserguild--string--null"},(0,r.kt)("inlineCode",{parentName:"h4"},"getRandomUser(guild) \u2192 {string | null}")),(0,r.kt)("p",null,"Generates a random non-blacklisted, non-bot user ID from a guild's members."),(0,r.kt)("h5",{id:"parameters"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guild")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The Discord guild object.")))),(0,r.kt)("h5",{id:"returns"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A string representing the user ID of a randomly selected non-blacklisted, non-bot user.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," if no eligible non-bot users are found."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"string | null")))),(0,r.kt)("h2",{id:"activehours-methods"},"activeHours Methods"),(0,r.kt)("h3",{id:"fetchactivehoursfromdbguildid"},(0,r.kt)("inlineCode",{parentName:"h3"},"fetchActiveHoursFromDB(guildId)")),(0,r.kt)("h4",{id:"async-fetchactivehoursfromdbguildid--promisestart_time-string-end_time-string"},(0,r.kt)("inlineCode",{parentName:"h4"},"(async) fetchActiveHoursFromDB(guildId) \u2192 {Promise.<{start_time: string, end_time: string}>}")),(0,r.kt)("p",null,"Fetches active operating hours for a guild from the database."),(0,r.kt)("h5",{id:"parameters-1"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")))),(0,r.kt)("h5",{id:"returns-1"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to an object containing ",(0,r.kt)("inlineCode",{parentName:"p"},"start_time")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"end_time")," representing the active operating hours for the guild."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise.<{start_time: string, end_time: string}>")))),(0,r.kt)("h3",{id:"storeoperatinghoursguildid-starttime-endtime"},(0,r.kt)("inlineCode",{parentName:"h3"},"storeOperatingHours(guildId, startTime, endTime)")),(0,r.kt)("h4",{id:"async-storeoperatinghoursguildid-starttime-endtime--promisevoid"},(0,r.kt)("inlineCode",{parentName:"h4"},"(async) storeOperatingHours(guildId, startTime, endTime) \u2192 {Promise.<void>}")),(0,r.kt)("p",null,"Stores or updates operating hours for a guild in the database."),(0,r.kt)("h5",{id:"parameters-2"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"startTime")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The start time of the operating hours.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"endTime")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The end time of the operating hours.")))),(0,r.kt)("h5",{id:"returns-2"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A Promise that resolves when the operating hours are successfully stored or updated."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<void>")))),(0,r.kt)("h3",{id:"getrandomhourwithinactivehoursactivehoursdata"},(0,r.kt)("inlineCode",{parentName:"h3"},"getRandomHourWithinActiveHours(activeHoursData)")),(0,r.kt)("h4",{id:"getrandomhourwithinactivehoursactivehoursdata--string"},(0,r.kt)("inlineCode",{parentName:"h4"},"getRandomHourWithinActiveHours(activeHoursData) \u2192 {string}")),(0,r.kt)("p",null,"Generates a random hour within the active operating hours for a guild."),(0,r.kt)("h5",{id:"parameters-3"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"activeHoursData")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"An object containing ",(0,r.kt)("inlineCode",{parentName:"td"},"start_time")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"end_time"),".")))),(0,r.kt)("h5",{id:"returns-3"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A formatted string representing a random hour within the active hours."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"string")))),(0,r.kt)("h2",{id:"dbconn-methods"},"dbConn Methods"),(0,r.kt)("h3",{id:"createconnectionpoollocal"},(0,r.kt)("inlineCode",{parentName:"h3"},"createConnectionPoolLocal()")),(0,r.kt)("h4",{id:"createconnectionpoollocal--object"},(0,r.kt)("inlineCode",{parentName:"h4"},"createConnectionPoolLocal() \u2192 {Object}")),(0,r.kt)("p",null,"Creates a connection pool for local database calls during testing."),(0,r.kt)("h5",{id:"returns-4"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"MySQL connection pool object."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")))),(0,r.kt)("h3",{id:"createconnectionpoolcloud"},(0,r.kt)("inlineCode",{parentName:"h3"},"createConnectionPoolCloud()")),(0,r.kt)("h4",{id:"createconnectionpoolcloud--object"},(0,r.kt)("inlineCode",{parentName:"h4"},"createConnectionPoolCloud() \u2192 {Object}")),(0,r.kt)("p",null,"Creates a connection pool for cloud database calls."),(0,r.kt)("h5",{id:"returns-5"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"An object representing a MySQL connection pool."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")))),(0,r.kt)("h3",{id:"createpromiseconnectionpool"},(0,r.kt)("inlineCode",{parentName:"h3"},"createPromiseConnectionPool()")),(0,r.kt)("h4",{id:"createpromiseconnectionpool--object"},(0,r.kt)("inlineCode",{parentName:"h4"},"createPromiseConnectionPool() \u2192 {Object}")),(0,r.kt)("p",null,"Creates a promise-based connection pool based on the specified environment flag."),(0,r.kt)("h5",{id:"returns-6"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A Promise-based MySQL connection pool."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")))),(0,r.kt)("h2",{id:"activehours-methods-1"},"activeHours Methods"),(0,r.kt)("h3",{id:"fetchactivehoursfromdbguildid-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"fetchActiveHoursFromDB(guildId)")),(0,r.kt)("h4",{id:"async-fetchactivehoursfromdbguildid--promisestart_time-string-end_time-string-1"},(0,r.kt)("inlineCode",{parentName:"h4"},"(async) fetchActiveHoursFromDB(guildId) \u2192 {Promise.<{start_time: string, end_time: string}>}")),(0,r.kt)("p",null,"Fetches active operating hours for a guild from the database."),(0,r.kt)("h5",{id:"parameters-4"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")))),(0,r.kt)("h5",{id:"returns-7"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to an object containing ",(0,r.kt)("inlineCode",{parentName:"p"},"start_time")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"end_time")," representing the active operating hours for the guild."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise.<{start_time: string, end_time: string}>")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Bot Methods")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"getCSV()"),"  "),(0,r.kt)("p",null,"Description: Gets the CSV fields"),(0,r.kt)("p",null,"Parameters: None"),(0,r.kt)("p",null,"Data Types: None"),(0,r.kt)("p",null,"Return Value: CSV fields (e.g., a list or string)"),(0,r.kt)("p",null,"Output Variables: None"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"getDatavis()")),(0,r.kt)("p",null,"Description:Checks for CSV fields by parsing lines from a file"),(0,r.kt)("p",null,"Parameters: None or a file path"),(0,r.kt)("p",null,"Data Types: String (file path)"),(0,r.kt)("p",null,"Return Value: Parsed CSV fields or data visualization"),(0,r.kt)("p",null,"Output Variables: None"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"getOperatingHours()")),(0,r.kt)("p",null,"Description:Gets the operation hours of the bot"),(0,r.kt)("p",null,"Parameters: None"),(0,r.kt)("p",null,"Data Types: None"),(0,r.kt)("p",null,"Return Value: Operating hours (e.g., start and end times)"),(0,r.kt)("p",null,"Output Variables: None"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"sendPrompt()")),(0,r.kt)("p",null,"Description:Sends a prompt to a user"),(0,r.kt)("p",null,"Parameters: User ID or message content"),(0,r.kt)("p",null,"Data Types: String (User ID) or message data"),(0,r.kt)("p",null,"Return Value: Status of the prompt being sent (e.g., success or failure)"),(0,r.kt)("p",null,"Output Variables: None"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"getResponseDelay()")),(0,r.kt)("p",null,"Description:Gets the time it takes when the bot has to resend a prompt to the user"),(0,r.kt)("p",null,"Parameters: None"),(0,r.kt)("p",null,"Data Types: None"),(0,r.kt)("p",null,"Return Value: Response delay time (e.g., integer or float)"),(0,r.kt)("p",null,"Output Variables: None"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"getResponse()")),(0,r.kt)("p",null,"Description: Gets response from the user"),(0,r.kt)("p",null,"Parameters: None"),(0,r.kt)("p",null,"Data Types: None"),(0,r.kt)("p",null,"Return Value: User response (e.g., string)"),(0,r.kt)("p",null,"Output Variables: None"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"setOperatingHours(int newStart, int newEnd)")),(0,r.kt)("p",null,"Description:Sets the operating hours"),(0,r.kt)("p",null,"Parameters: New start and end times (integer)"),(0,r.kt)("p",null,"Data Types: Integer (newStart and newEnd)"),(0,r.kt)("p",null,"Return Value: Status of operating hours update"),(0,r.kt)("p",null,"Output Variables: None"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"generateRandomPromptTime()")),(0,r.kt)("p",null,"Description:Generates a random time for when prompts are assigned"),(0,r.kt)("p",null,"Parameters: None"),(0,r.kt)("p",null,"Data Types: None"),(0,r.kt)("p",null,"Return Value: Random prompt assignment time (e.g., timestamp)"),(0,r.kt)("p",null,"Output Variables: None"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"generateRandomPrompt()")),(0,r.kt)("p",null,"Description:  Generates a random prompt"),(0,r.kt)("p",null,"Parameters: None"),(0,r.kt)("p",null,"Data Types: None"),(0,r.kt)("p",null,"Return Value: Randomly generated prompt (e.g., string)"),(0,r.kt)("p",null,"Output Variables: None"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"getPromptList()")),(0,r.kt)("p",null,"Description: Gets the prompt list"),(0,r.kt)("p",null,"Parameters: None"),(0,r.kt)("p",null,"Data Types: None"),(0,r.kt)("p",null,"Return Value: List of prompts"),(0,r.kt)("p",null,"Output Variables: None"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"setPromptList()")),(0,r.kt)("p",null,"Description: Sets the prompt list "),(0,r.kt)("p",null,"Parameters: List of prompts"),(0,r.kt)("p",null,"Data Types: List of strings"),(0,r.kt)("p",null,"Return Value: Status of prompt list update"),(0,r.kt)("p",null,"Output Variables: None"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"getResponsePostComment()")),(0,r.kt)("p",null,"Description: Gets and stores the response of a post comment"),(0,r.kt)("p",null,"Parameters: None"),(0,r.kt)("p",null,"Data Types: None"),(0,r.kt)("p",null,"Return Value: User response to a post comment (e.g., string)"),(0,r.kt)("p",null,"Output Variables: None"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"setResponsePostComment()")),(0,r.kt)("p",null,"Description:  Sets a response of a post comment"),(0,r.kt)("p",null,"Parameters: User response to a post comment (e.g., string)"),(0,r.kt)("p",null,"Data Types: String"),(0,r.kt)("p",null,"Return Value: Status of response update"),(0,r.kt)("p",null,"Output Variables: None"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"getBlackList()")),(0,r.kt)("p",null,"Description: Shows the blacklist"),(0,r.kt)("p",null,"Parameters: None"),(0,r.kt)("p",null,"Data Types: None"),(0,r.kt)("p",null,"Return Value: List of blacklisted users"),(0,r.kt)("p",null,"Output Variables: None"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"addUserToBlackList()")),(0,r.kt)("p",null,"Description: Adds users to the blacklist"),(0,r.kt)("p",null,"Parameters: User ID or username"),(0,r.kt)("p",null,"Data Types: String"),(0,r.kt)("p",null,"Return Value: Status of user addition to the blacklist"),(0,r.kt)("p",null,"Output Variables: None"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"removeUserFromBlackList()")),(0,r.kt)("p",null,"Description: Removes a user from the blacklist"),(0,r.kt)("p",null,"Parameters: User ID or username"),(0,r.kt)("p",null,"Data Types: String"),(0,r.kt)("p",null,"Return Value: Status of user removal from the blacklist"),(0,r.kt)("p",null,"Output Variables: None"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"selectRandomUserToPrompt()")),(0,r.kt)("p",null,"Description: Selects a random user to assign a prompt to"),(0,r.kt)("p",null,"Parameters: None"),(0,r.kt)("p",null,"Data Types: None"),(0,r.kt)("p",null,"Return Value: Selected user for prompt assignment (e.g., User ID or username)"),(0,r.kt)("p",null,"Output Variables: None"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"getApprovalStatus()")),(0,r.kt)("p",null,"Description:Gets the approval status after sending a user response to the moderator"),(0,r.kt)("p",null,"Parameters: None"),(0,r.kt)("p",null,"Data Types: None"),(0,r.kt)("p",null,"Return Value: Approval status (e.g., boolean)"),(0,r.kt)("p",null,"Output Variables: None"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"setApprovalStatus()")),(0,r.kt)("p",null,"Description: Sets the approval status after sending a user response to a moderator"),(0,r.kt)("p",null,"Parameters: Approval status (e.g., boolean)"),(0,r.kt)("p",null,"Data Types: Boolean"),(0,r.kt)("p",null,"Return Value: Status of approval status update"),(0,r.kt)("p",null,"Output Variables: None"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"sendToResponseToMod()")),(0,r.kt)("p",null,"Description: Sends a user response to a prompt to a moderator"),(0,r.kt)("p",null,"Parameters: User response to a prompt"),(0,r.kt)("p",null,"Data Types: String"),(0,r.kt)("p",null,"Return Value: Status of sending to the moderator"),(0,r.kt)("p",null,"Output Variables: None"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"postResponseToChannel()")),(0,r.kt)("p",null,"Description: Posts the response of a moderator to a user to a channel"),(0,r.kt)("p",null,"Parameters: Moderator's response to a user"),(0,r.kt)("p",null,"Data Types: String"),(0,r.kt)("p",null,"Return Value: Status of posting to a channel"),(0,r.kt)("p",null,"Output Variables: None"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"deleteOriginalPromptFromChannel()")),(0,r.kt)("p",null,"Description:Deletes a prompt from a certain channel"),(0,r.kt)("p",null,"Parameters: Channel or prompt ID"),(0,r.kt)("p",null,"Data Types: String or identifier"),(0,r.kt)("p",null,"Return Value: Status of prompt deletion from the channel"),(0,r.kt)("p",null,"Output Variables: None"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"setUsersAlreadyPromptedList()")),(0,r.kt)("p",null,"Description:  Sets a list of users that were already prompted by the bot"),(0,r.kt)("p",null,"Parameters: List of users"),(0,r.kt)("p",null,"Data Types: List of user IDs or usernames"),(0,r.kt)("p",null,"Return Value: Status of updating the list"),(0,r.kt)("p",null,"Output Variables: None"))}d.isMDXComponent=!0}}]);