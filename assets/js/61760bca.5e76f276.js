"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[6585],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(r),u=a,h=m["".concat(c,".").concat(u)]||m[u]||d[u]||o;return r?n.createElement(h,i(i({ref:t},s),{},{components:r})):n.createElement(h,i({ref:t},s))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},3966:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_position:5},i="Using Git as Our Version Control",l={unversionedId:"development-plan/version-control",id:"development-plan/version-control",title:"Using Git as Our Version Control",description:"Branching Strategy: Branch by Branch Development",source:"@site/docs/development-plan/version-control.md",sourceDirName:"development-plan",slug:"/development-plan/version-control",permalink:"/project-bereal-meets-slack/docs/development-plan/version-control",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Fall/project-bereal-meets-slack/edit/main/documentation/docs/development-plan/version-control.md",tags:[],version:"current",lastUpdatedBy:"Rishi Duggal",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docsSidebar",previous:{title:"Development Environment",permalink:"/project-bereal-meets-slack/docs/development-plan/development-environment"},next:{title:"System Architecture",permalink:"/project-bereal-meets-slack/docs/category/system-architecture"}},c={},p=[{value:"Branching Strategy: Branch by Branch Development",id:"branching-strategy-branch-by-branch-development",level:2},{value:"Protecting the Main Branch",id:"protecting-the-main-branch",level:2},{value:"Additional Important Information",id:"additional-important-information",level:2}],s={toc:p};function m(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"using-git-as-our-version-control"},"Using Git as Our Version Control"),(0,a.kt)("h2",{id:"branching-strategy-branch-by-branch-development"},"Branching Strategy: Branch by Branch Development"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Branch Creation"),": Developers are expected to work on individual branches for every feature or bug fix. Each branch should be prefixed with ",(0,a.kt)("inlineCode",{parentName:"p"},"dev/")," followed by the Jira Card/Ticket Name and Number. ")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Commit Message Convention"),": When a developer makes their first commit to their branch, the commit message should include the Jira Card/Ticket Name and Number. This allows Jira to automatically link the branch to the corresponding ticket."))),(0,a.kt)("h2",{id:"protecting-the-main-branch"},"Protecting the Main Branch"),(0,a.kt)("p",null,"To ensure code quality and prevent accidental changes to our production code, the ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," branch is protected. Here are the measures in place:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Merge Requests"),": Direct pushes to the ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," branch are not allowed. Instead, developers must open a merge request (or pull request) to introduce their changes. This process ensures that all code changes are reviewed by peers before being merged into the main codebase.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Code Reviews"),": Before a merge request is approved, it must be reviewed by at least one other developer. This promotes a culture of code quality, knowledge sharing, and collective code ownership."))),(0,a.kt)("h2",{id:"additional-important-information"},"Additional Important Information"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Commit Regularly"),": To avoid large, hard-to-review code changes, developers are encouraged to commit their changes regularly. Small, incremental commits make it easier to track changes, review code, and identify bugs.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Keep Branches Updated"),": Developers should regularly pull changes from the ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," branch into their feature branches. This ensures that when it's time to merge, conflicts are minimized, and the code is up to date with the latest developments.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Clean Up After Merging"),": Once a branch has been merged into ",(0,a.kt)("inlineCode",{parentName:"p"},"main"),", it's a good practice to delete the branch to keep the repository tidy."))))}m.isMDXComponent=!0}}]);