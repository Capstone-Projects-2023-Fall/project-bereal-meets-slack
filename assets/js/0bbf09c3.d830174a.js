"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[2602],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=l(n),d=a,g=c["".concat(i,".").concat(d)]||c[d]||m[d]||s;return n?r.createElement(g,o(o({ref:t},u),{},{components:n})):r.createElement(g,o({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=d;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p[c]="string"==typeof e?e:a,o[1]=p;for(var l=2;l<s;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3019:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>p,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const s={sidebar_position:2},o="Bot Api Spec",p={unversionedId:"api-specification/botAPISpec",id:"api-specification/botAPISpec",title:"Bot Api Spec",description:"Introduction",source:"@site/docs/api-specification/botAPISpec.md",sourceDirName:"api-specification",slug:"/api-specification/botAPISpec",permalink:"/project-bereal-meets-slack/docs/api-specification/botAPISpec",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Fall/project-bereal-meets-slack/edit/main/documentation/docs/api-specification/botAPISpec.md",tags:[],version:"current",lastUpdatedBy:"NTRachel",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Server Api Spec",permalink:"/project-bereal-meets-slack/docs/api-specification/design-api-intro"},next:{title:"API 1 - Swagger Petstore",permalink:"/project-bereal-meets-slack/docs/api-specification/openapi-spec"}},i={},l=[],u={toc:l};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"bot-api-spec"},"Bot Api Spec"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Introduction"),"\nThis outlines the API specification for the Bot. It provides details on the methods available, their parameters, return values, and the usage."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Bot Methods")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"getCSV()"),"\nDescription: Gets the CSV fields\nParameters: None\nData Types: None\nReturn Value: CSV fields (e.g., a list or string)\nOutput Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"getDatavis()"),"\nDescription:Checks for CSV fields by parsing lines from a file\nParameters: None or a file path\nData Types: String (file path)\nReturn Value: Parsed CSV fields or data visualization\nOutput Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"getOperatingHours()"),"\nDescription:Gets the operation hours of the bot\nParameters: None\nData Types: None\nReturn Value: Operating hours (e.g., start and end times)\nOutput Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"sendPrompt()"),"\nDescription:Sends a prompt to a user\nParameters: User ID or message content\nData Types: String (User ID) or message data\nReturn Value: Status of the prompt being sent (e.g., success or failure)\nOutput Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"getResponseDelay()"),"\nDescription:Gets the time it takes when the bot has to resend a prompt to the user\nParameters: None\nData Types: None\nReturn Value: Response delay time (e.g., integer or float)\nOutput Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"getResponse()"),"\nDescription: Gets response from the user\nParameters: None\nData Types: None\nReturn Value: User response (e.g., string)\nOutput Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"setOperatingHours(int newStart, int newEnd)"),"\nDescription:Sets the operating hours\nParameters: New start and end times (integer)\nData Types: Integer (newStart and newEnd)\nReturn Value: Status of operating hours update\nOutput Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"generateRandomPromptTime()"),"\nDescription:Generates a random time for when prompts are assigned\nParameters: None\nData Types: None\nReturn Value: Random prompt assignment time (e.g., timestamp)\nOutput Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"generateRandomPrompt()"),"\nDescription:  Generates a random prompt\nParameters: None\nData Types: None\nReturn Value: Randomly generated prompt (e.g., string)\nOutput Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"getPromptList()"),"\nDescription: Gets the prompt list\nParameters: None\nData Types: None\nReturn Value: List of prompts\nOutput Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"setPromptList()"),"\nDescription: Sets the prompt list\nParameters: List of prompts\nData Types: List of strings\nReturn Value: Status of prompt list update\nOutput Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"getResponsePostComment()"),"\nDescription: Gets and stores the response of a post comment\nParameters: None\nData Types: None\nReturn Value: User response to a post comment (e.g., string)\nOutput Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"setResponsePostComment()"),"\nDescription:  Sets a response of a post comment\nParameters: User response to a post comment (e.g., string)\nData Types: String\nReturn Value: Status of response update\nOutput Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"getBlackList()"),"\nDescription: Shows the blacklist\nParameters: None\nData Types: None\nReturn Value: List of blacklisted users\nOutput Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"addUserToBlackList()"),"\nDescription: Adds users to the blacklist\nParameters: User ID or username\nData Types: String\nReturn Value: Status of user addition to the blacklist\nOutput Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"removeUserFromBlackList()"),"\nDescription: Removes a user from the blacklist\nParameters: User ID or username\nData Types: String\nReturn Value: Status of user removal from the blacklist\nOutput Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"selectRandomUserToPrompt()"),"\nDescription: Selects a random user to assign a prompt to\nParameters: None\nData Types: None\nReturn Value: Selected user for prompt assignment (e.g., User ID or username)\nOutput Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"getApprovalStatus()"),"\nDescription:Gets the approval status after sending a user response to the moderator\nParameters: None\nData Types: None\nReturn Value: Approval status (e.g., boolean)\nOutput Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"setApprovalStatus()"),"\nDescription: Sets the approval status after sending a user response to a moderator\nParameters: Approval status (e.g., boolean)\nData Types: Boolean\nReturn Value: Status of approval status update\nOutput Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"sendToResponseToMod()"),"\nDescription: Sends a user response to a prompt to a moderator\nParameters: User response to a prompt\nData Types: String\nReturn Value: Status of sending to the moderator\nOutput Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"postResponseToChannel()"),"\nDescription: Posts the response of a moderator to a user to a channel\nParameters: Moderator's response to a user\nData Types: String\nReturn Value: Status of posting to a channel\nOutput Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"deleteOriginalPromptFromChannel()"),"\nDescription:Deletes a prompt from a certain channel\nParameters: Channel or prompt ID\nData Types: String or identifier\nReturn Value: Status of prompt deletion from the channel\nOutput Variables: None"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"setUsersAlreadyPromptedList()"),"\nDescription:  Sets a list of users that were already prompted by the bot\nParameters: List of users\nData Types: List of user IDs or usernames\nReturn Value: Status of updating the list\nOutput Variables: None"))}c.isMDXComponent=!0}}]);