"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[2602],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>c});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),p=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(d.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),s=p(a),g=r,c=s["".concat(d,".").concat(g)]||s[g]||u[g]||l;return a?n.createElement(c,i(i({ref:t},m),{},{components:a})):n.createElement(c,i({ref:t},m))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=g;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o[s]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},3019:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>s,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const l={sidebar_position:2},i="Bot Api Spec",o={unversionedId:"api-specification/botAPISpec",id:"api-specification/botAPISpec",title:"Bot Api Spec",description:"Introduction",source:"@site/docs/api-specification/botAPISpec.md",sourceDirName:"api-specification",slug:"/api-specification/botAPISpec",permalink:"/project-bereal-meets-slack/docs/api-specification/botAPISpec",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Fall/project-bereal-meets-slack/edit/main/documentation/docs/api-specification/botAPISpec.md",tags:[],version:"current",lastUpdatedBy:"gevdram",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Api Spec Document",permalink:"/project-bereal-meets-slack/docs/api-specification/design-api-intro"},next:{title:"API 1 - Swagger Petstore",permalink:"/project-bereal-meets-slack/docs/api-specification/openapi-spec"}},d={},p=[{value:"getRandom Methods",id:"getrandom-methods",level:2},{value:"<code>getRandomUser(guild)</code>",id:"getrandomuserguild",level:3},{value:"<code>getRandomUser(guild) \u2192 {string | null}</code>",id:"getrandomuserguild--string--null",level:4},{value:"Parameters:",id:"parameters",level:5},{value:"Returns:",id:"returns",level:5},{value:"activeHours Methods",id:"activehours-methods",level:2},{value:"<code>fetchActiveHoursFromDB(guildId)</code>",id:"fetchactivehoursfromdbguildid",level:3},{value:"<code>(async) fetchActiveHoursFromDB(guildId) \u2192 {Promise.&lt;{start_time: string, end_time: string}&gt;}</code>",id:"async-fetchactivehoursfromdbguildid--promisestart_time-string-end_time-string",level:4},{value:"Parameters:",id:"parameters-1",level:5},{value:"Returns:",id:"returns-1",level:5},{value:"<code>storeOperatingHours(guildId, startTime, endTime)</code>",id:"storeoperatinghoursguildid-starttime-endtime",level:3},{value:"<code>(async) storeOperatingHours(guildId, startTime, endTime) \u2192 {Promise.&lt;void&gt;}</code>",id:"async-storeoperatinghoursguildid-starttime-endtime--promisevoid",level:4},{value:"Parameters:",id:"parameters-2",level:5},{value:"Returns:",id:"returns-2",level:5},{value:"<code>getRandomHourWithinActiveHours(activeHoursData)</code>",id:"getrandomhourwithinactivehoursactivehoursdata",level:3},{value:"<code>getRandomHourWithinActiveHours(activeHoursData) \u2192 {string}</code>",id:"getrandomhourwithinactivehoursactivehoursdata--string",level:4},{value:"Parameters:",id:"parameters-3",level:5},{value:"Returns:",id:"returns-3",level:5},{value:"dbConn Methods",id:"dbconn-methods",level:2},{value:"<code>createConnectionPoolLocal()</code>",id:"createconnectionpoollocal",level:3},{value:"<code>createConnectionPoolLocal() \u2192 {Object}</code>",id:"createconnectionpoollocal--object",level:4},{value:"Returns:",id:"returns-4",level:5},{value:"<code>createConnectionPoolCloud()</code>",id:"createconnectionpoolcloud",level:3},{value:"<code>createConnectionPoolCloud() \u2192 {Object}</code>",id:"createconnectionpoolcloud--object",level:4},{value:"Returns:",id:"returns-5",level:5},{value:"<code>createPromiseConnectionPool()</code>",id:"createpromiseconnectionpool",level:3},{value:"<code>createPromiseConnectionPool() \u2192 {Object}</code>",id:"createpromiseconnectionpool--object",level:4},{value:"Returns:",id:"returns-6",level:5},{value:"promptTimeout Methods",id:"prompttimeout-methods",level:2},{value:"<code>setupPrompt(channelId, message, user, originalPrompt)</code>",id:"setuppromptchannelid-message-user-originalprompt",level:3},{value:"<code>setupPrompt(channelId, message, user, originalPrompt) \u2192 {void}</code>",id:"setuppromptchannelid-message-user-originalprompt--void",level:4},{value:"Parameters:",id:"parameters-4",level:5},{value:"<code>setPromptTimeout(promptId, duration, message, expiredContent, user, originalPrompt, channelId)</code>",id:"setprompttimeoutpromptid-duration-message-expiredcontent-user-originalprompt-channelid",level:3},{value:"<code>setPromptTimeout(promptId, duration, message, expiredContent, user, originalPrompt, channelId) \u2192 {void}</code>",id:"setprompttimeoutpromptid-duration-message-expiredcontent-user-originalprompt-channelid--void",level:4},{value:"Parameters:",id:"parameters-5",level:5},{value:"<code>handleReprompt(user, originalPrompt, channelId, originalMessage)</code>",id:"handlerepromptuser-originalprompt-channelid-originalmessage",level:3},{value:"<code>handleReprompt(user, originalPrompt, channelId, originalMessage)</code>",id:"handlerepromptuser-originalprompt-channelid-originalmessage-1",level:4},{value:"Parameters:",id:"parameters-6",level:5},{value:"promptUtils Methods",id:"promptutils-methods",level:2},{value:"<code>getPrompts(guildId)</code>",id:"getpromptsguildid",level:3},{value:"<code>getPrompts(guildId) \u2192 {Promise&lt;Array.&lt;string&gt;&gt;}</code>",id:"getpromptsguildid--promisearraystring",level:4},{value:"Parameters:",id:"parameters-7",level:5},{value:"Returns:",id:"returns-7",level:5},{value:"<code>addPrompt(guildId, prompt)</code>",id:"addpromptguildid-prompt",level:3},{value:"<code>addPrompt(guildId, prompt) \u2192 {Promise&lt;string&gt;}</code>",id:"addpromptguildid-prompt--promisestring",level:4},{value:"Parameters:",id:"parameters-8",level:5},{value:"Returns:",id:"returns-8",level:5},{value:"<code>deletePrompt(guildId, promptToDelete)</code>",id:"deletepromptguildid-prompttodelete",level:3},{value:"<code>deletePrompt(guildId, promptToDelete) \u2192 {Promise&lt;string&gt;}</code>",id:"deletepromptguildid-prompttodelete--promisestring",level:4},{value:"Parameters:",id:"parameters-9",level:5},{value:"Returns:",id:"returns-9",level:5},{value:"<code>listPrompts(guildId)</code>",id:"listpromptsguildid",level:3},{value:"<code>listPrompts(guildId) \u2192 {Promise&lt;string&gt;}</code>",id:"listpromptsguildid--promisestring",level:4},{value:"Parameters:",id:"parameters-10",level:5},{value:"Returns:",id:"returns-10",level:5},{value:"<code>searchPrompts(guildId, query)</code>",id:"searchpromptsguildid-query",level:3},{value:"<code>searchPrompts(guildId, query) \u2192 {Promise&lt;string&gt;}</code>",id:"searchpromptsguildid-query--promisestring",level:4},{value:"Parameters:",id:"parameters-11",level:5},{value:"Returns:",id:"returns-11",level:5},{value:"<code>getRandomPrompt(guildId)</code>",id:"getrandompromptguildid",level:3},{value:"<code>getRandomPrompt(guildId) \u2192 {Promise&lt;string | null&gt;}</code>",id:"getrandompromptguildid--promisestring--null",level:4},{value:"Parameters:",id:"parameters-12",level:5},{value:"Returns:",id:"returns-12",level:5},{value:"<code>getRandomHourWithinActiveHours(activeHoursData)</code>",id:"getrandomhourwithinactivehoursactivehoursdata-1",level:3},{value:"<code>getRandomHourWithinActiveHours(activeHoursData) \u2192 {string}</code>",id:"getrandomhourwithinactivehoursactivehoursdata--string-1",level:4},{value:"Parameters:",id:"parameters-13",level:5},{value:"Returns:",id:"returns-13",level:5},{value:"saveDB Methods",id:"savedb-methods",level:2},{value:"<code>fetchImageMessagesUntilPrompt(client, channelId)</code>",id:"fetchimagemessagesuntilpromptclient-channelid",level:3},{value:"<code>fetchImageMessagesUntilPrompt(client, channelId) \u2192 {Promise.&lt;Array.&lt;Object&gt;&gt;}</code>",id:"fetchimagemessagesuntilpromptclient-channelid--promisearrayobject",level:4},{value:"Parameters:",id:"parameters-14",level:5},{value:"Returns:",id:"returns-14",level:5},{value:"<code>countReactions(message)</code>",id:"countreactionsmessage",level:3},{value:"<code>countReactions(message) \u2192 {number}</code>",id:"countreactionsmessage--number",level:4},{value:"Parameters:",id:"parameters-15",level:5},{value:"Returns:",id:"returns-15",level:5},{value:"<code>getImageLinkFromMessage(message)</code>",id:"getimagelinkfrommessagemessage",level:3},{value:"<code>getImageLinkFromMessage(message) \u2192 {string | null}</code>",id:"getimagelinkfrommessagemessage--string--null",level:4},{value:"Parameters:",id:"parameters-16",level:5},{value:"Returns:",id:"returns-16",level:5},{value:"<code>insertResponseData(messageData)</code>",id:"insertresponsedatamessagedata",level:3},{value:"<code>(async) insertResponseData(messageData) \u2192 {void}</code>",id:"async-insertresponsedatamessagedata--void",level:4},{value:"Parameters:",id:"parameters-17",level:5},{value:"<code>findTimeDifferenceToPrompt(client, channelId, referenceMessage)</code>",id:"findtimedifferencetopromptclient-channelid-referencemessage",level:3},{value:"<code>(async) findTimeDifferenceToPrompt(client, channelId, referenceMessage) \u2192 {number | null}</code>",id:"async-findtimedifferencetopromptclient-channelid-referencemessage--number--null",level:4},{value:"Parameters:",id:"parameters-18",level:5},{value:"Returns:",id:"returns-17",level:5},{value:"<code>saveDB(client, channelId)</code>",id:"savedbclient-channelid",level:3},{value:"<code>(async) saveDB(client, channelId) \u2192 {Array}</code>",id:"async-savedbclient-channelid--array",level:4},{value:"Parameters:",id:"parameters-19",level:5},{value:"Returns:",id:"returns-18",level:5},{value:"<code>insertResponseData(messageData)</code>",id:"insertresponsedatamessagedata-1",level:3},{value:"<code>(async) insertResponseData(messageData) \u2192 {void}</code>",id:"async-insertresponsedatamessagedata--void-1",level:4},{value:"Parameters:",id:"parameters-20",level:5}],m={toc:p};function s(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"bot-api-spec"},"Bot Api Spec"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Introduction"),"\nThis outlines the API specification for the Bot. It provides details on the methods available, their parameters, return values, and the usage."),(0,r.kt)("h2",{id:"getrandom-methods"},"getRandom Methods"),(0,r.kt)("h3",{id:"getrandomuserguild"},(0,r.kt)("inlineCode",{parentName:"h3"},"getRandomUser(guild)")),(0,r.kt)("h4",{id:"getrandomuserguild--string--null"},(0,r.kt)("inlineCode",{parentName:"h4"},"getRandomUser(guild) \u2192 {string | null}")),(0,r.kt)("p",null,"Generates a random non-blacklisted, non-bot user ID from a guild's members."),(0,r.kt)("h5",{id:"parameters"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guild")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The Discord guild object.")))),(0,r.kt)("h5",{id:"returns"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A string representing the user ID of a randomly selected non-blacklisted, non-bot user.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," if no eligible non-bot users are found."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"string | null")))),(0,r.kt)("h2",{id:"activehours-methods"},"activeHours Methods"),(0,r.kt)("h3",{id:"fetchactivehoursfromdbguildid"},(0,r.kt)("inlineCode",{parentName:"h3"},"fetchActiveHoursFromDB(guildId)")),(0,r.kt)("h4",{id:"async-fetchactivehoursfromdbguildid--promisestart_time-string-end_time-string"},(0,r.kt)("inlineCode",{parentName:"h4"},"(async) fetchActiveHoursFromDB(guildId) \u2192 {Promise.<{start_time: string, end_time: string}>}")),(0,r.kt)("p",null,"Fetches active operating hours for a guild from the database."),(0,r.kt)("h5",{id:"parameters-1"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")))),(0,r.kt)("h5",{id:"returns-1"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to an object containing ",(0,r.kt)("inlineCode",{parentName:"p"},"start_time")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"end_time")," representing the active operating hours for the guild."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise.<{start_time: string, end_time: string}>")))),(0,r.kt)("h3",{id:"storeoperatinghoursguildid-starttime-endtime"},(0,r.kt)("inlineCode",{parentName:"h3"},"storeOperatingHours(guildId, startTime, endTime)")),(0,r.kt)("h4",{id:"async-storeoperatinghoursguildid-starttime-endtime--promisevoid"},(0,r.kt)("inlineCode",{parentName:"h4"},"(async) storeOperatingHours(guildId, startTime, endTime) \u2192 {Promise.<void>}")),(0,r.kt)("p",null,"Stores or updates operating hours for a guild in the database."),(0,r.kt)("h5",{id:"parameters-2"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"startTime")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The start time of the operating hours.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"endTime")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The end time of the operating hours.")))),(0,r.kt)("h5",{id:"returns-2"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A Promise that resolves when the operating hours are successfully stored or updated."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<void>")))),(0,r.kt)("h3",{id:"getrandomhourwithinactivehoursactivehoursdata"},(0,r.kt)("inlineCode",{parentName:"h3"},"getRandomHourWithinActiveHours(activeHoursData)")),(0,r.kt)("h4",{id:"getrandomhourwithinactivehoursactivehoursdata--string"},(0,r.kt)("inlineCode",{parentName:"h4"},"getRandomHourWithinActiveHours(activeHoursData) \u2192 {string}")),(0,r.kt)("p",null,"Generates a random hour within the active operating hours for a guild."),(0,r.kt)("h5",{id:"parameters-3"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"activeHoursData")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"An object containing ",(0,r.kt)("inlineCode",{parentName:"td"},"start_time")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"end_time"),".")))),(0,r.kt)("h5",{id:"returns-3"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A formatted string representing a random hour within the active hours."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"string")))),(0,r.kt)("h2",{id:"dbconn-methods"},"dbConn Methods"),(0,r.kt)("h3",{id:"createconnectionpoollocal"},(0,r.kt)("inlineCode",{parentName:"h3"},"createConnectionPoolLocal()")),(0,r.kt)("h4",{id:"createconnectionpoollocal--object"},(0,r.kt)("inlineCode",{parentName:"h4"},"createConnectionPoolLocal() \u2192 {Object}")),(0,r.kt)("p",null,"Creates a connection pool for local database calls during testing."),(0,r.kt)("h5",{id:"returns-4"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"MySQL connection pool object."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")))),(0,r.kt)("h3",{id:"createconnectionpoolcloud"},(0,r.kt)("inlineCode",{parentName:"h3"},"createConnectionPoolCloud()")),(0,r.kt)("h4",{id:"createconnectionpoolcloud--object"},(0,r.kt)("inlineCode",{parentName:"h4"},"createConnectionPoolCloud() \u2192 {Object}")),(0,r.kt)("p",null,"Creates a connection pool for cloud database calls."),(0,r.kt)("h5",{id:"returns-5"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"An object representing a MySQL connection pool."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")))),(0,r.kt)("h3",{id:"createpromiseconnectionpool"},(0,r.kt)("inlineCode",{parentName:"h3"},"createPromiseConnectionPool()")),(0,r.kt)("h4",{id:"createpromiseconnectionpool--object"},(0,r.kt)("inlineCode",{parentName:"h4"},"createPromiseConnectionPool() \u2192 {Object}")),(0,r.kt)("p",null,"Creates a promise-based connection pool based on the specified environment flag."),(0,r.kt)("h5",{id:"returns-6"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A Promise-based MySQL connection pool."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")))),(0,r.kt)("h2",{id:"prompttimeout-methods"},"promptTimeout Methods"),(0,r.kt)("h3",{id:"setuppromptchannelid-message-user-originalprompt"},(0,r.kt)("inlineCode",{parentName:"h3"},"setupPrompt(channelId, message, user, originalPrompt)")),(0,r.kt)("h4",{id:"setuppromptchannelid-message-user-originalprompt--void"},(0,r.kt)("inlineCode",{parentName:"h4"},"setupPrompt(channelId, message, user, originalPrompt) \u2192 {void}")),(0,r.kt)("p",null,"Sets up a timed prompt in a specific channel for user interaction."),(0,r.kt)("h5",{id:"parameters-4"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channelId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord channel where the prompt is set up.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"message")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The message content for the prompt.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"user")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The Discord user object for whom the prompt is set up.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"originalPrompt")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The original prompt object or content for reference.")))),(0,r.kt)("h3",{id:"setprompttimeoutpromptid-duration-message-expiredcontent-user-originalprompt-channelid"},(0,r.kt)("inlineCode",{parentName:"h3"},"setPromptTimeout(promptId, duration, message, expiredContent, user, originalPrompt, channelId)")),(0,r.kt)("h4",{id:"setprompttimeoutpromptid-duration-message-expiredcontent-user-originalprompt-channelid--void"},(0,r.kt)("inlineCode",{parentName:"h4"},"setPromptTimeout(promptId, duration, message, expiredContent, user, originalPrompt, channelId) \u2192 {void}")),(0,r.kt)("p",null,"Sets a timeout for a prompt identified by ",(0,r.kt)("inlineCode",{parentName:"p"},"promptId"),"."),(0,r.kt)("h5",{id:"parameters-5"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"promptId")),(0,r.kt)("td",{parentName:"tr",align:null},"any"),(0,r.kt)("td",{parentName:"tr",align:null},"Identifier for the prompt.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"duration")),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"Duration of the timeout in milliseconds.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"message")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"Discord message object associated with the prompt.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"expiredContent")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Content to display when the prompt expires.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"user")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"Discord user object associated with the prompt.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"originalPrompt")),(0,r.kt)("td",{parentName:"tr",align:null},"any"),(0,r.kt)("td",{parentName:"tr",align:null},"Original prompt content.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channelId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"ID of the Discord channel where the prompt is active.")))),(0,r.kt)("h3",{id:"handlerepromptuser-originalprompt-channelid-originalmessage"},(0,r.kt)("inlineCode",{parentName:"h3"},"handleReprompt(user, originalPrompt, channelId, originalMessage)")),(0,r.kt)("h4",{id:"handlerepromptuser-originalprompt-channelid-originalmessage-1"},(0,r.kt)("inlineCode",{parentName:"h4"},"handleReprompt(user, originalPrompt, channelId, originalMessage)")),(0,r.kt)("p",null,"Handles reprompting the user."),(0,r.kt)("h5",{id:"parameters-6"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"user")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The user object.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"originalPrompt")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The original prompt message.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channelId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the channel where the reprompt message will be sent.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"originalMessage")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The original message that triggered the reprompt.")))),(0,r.kt)("h2",{id:"promptutils-methods"},"promptUtils Methods"),(0,r.kt)("h3",{id:"getpromptsguildid"},(0,r.kt)("inlineCode",{parentName:"h3"},"getPrompts(guildId)")),(0,r.kt)("h4",{id:"getpromptsguildid--promisearraystring"},(0,r.kt)("inlineCode",{parentName:"h4"},"getPrompts(guildId) \u2192 {Promise<Array.<string>>}")),(0,r.kt)("p",null,"Retrieves a list of prompts for a specified guild from the database."),(0,r.kt)("h5",{id:"parameters-7"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")))),(0,r.kt)("h5",{id:"returns-7"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to an array of prompt texts."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<Array.<string>>")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"addpromptguildid-prompt"},(0,r.kt)("inlineCode",{parentName:"h3"},"addPrompt(guildId, prompt)")),(0,r.kt)("h4",{id:"addpromptguildid-prompt--promisestring"},(0,r.kt)("inlineCode",{parentName:"h4"},"addPrompt(guildId, prompt) \u2192 {Promise<string>}")),(0,r.kt)("p",null,"Adds a new prompt to the database for a specified guild."),(0,r.kt)("h5",{id:"parameters-8"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"prompt")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The text of the prompt to be added.")))),(0,r.kt)("h5",{id:"returns-8"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to a message confirming the addition of the prompt."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<string>")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"deletepromptguildid-prompttodelete"},(0,r.kt)("inlineCode",{parentName:"h3"},"deletePrompt(guildId, promptToDelete)")),(0,r.kt)("h4",{id:"deletepromptguildid-prompttodelete--promisestring"},(0,r.kt)("inlineCode",{parentName:"h4"},"deletePrompt(guildId, promptToDelete) \u2192 {Promise<string>}")),(0,r.kt)("p",null,"Deletes a prompt from the database for a specified guild."),(0,r.kt)("h5",{id:"parameters-9"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"promptToDelete")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The text of the prompt to be deleted or matched.")))),(0,r.kt)("h5",{id:"returns-9"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to a message confirming the deletion or suggesting similar prompts."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<string>")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"listpromptsguildid"},(0,r.kt)("inlineCode",{parentName:"h3"},"listPrompts(guildId)")),(0,r.kt)("h4",{id:"listpromptsguildid--promisestring"},(0,r.kt)("inlineCode",{parentName:"h4"},"listPrompts(guildId) \u2192 {Promise<string>}")),(0,r.kt)("p",null,"Retrieves and lists all prompts for a specified guild."),(0,r.kt)("h5",{id:"parameters-10"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")))),(0,r.kt)("h5",{id:"returns-10"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to a string listing all prompts."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<string>")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"searchpromptsguildid-query"},(0,r.kt)("inlineCode",{parentName:"h3"},"searchPrompts(guildId, query)")),(0,r.kt)("h4",{id:"searchpromptsguildid-query--promisestring"},(0,r.kt)("inlineCode",{parentName:"h4"},"searchPrompts(guildId, query) \u2192 {Promise<string>}")),(0,r.kt)("p",null,"Searches for prompts that match a specified query for a specified guild."),(0,r.kt)("h5",{id:"parameters-11"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"query")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The search query.")))),(0,r.kt)("h5",{id:"returns-11"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to a string listing matching prompts or suggesting alternatives."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<string>")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getrandompromptguildid"},(0,r.kt)("inlineCode",{parentName:"h3"},"getRandomPrompt(guildId)")),(0,r.kt)("h4",{id:"getrandompromptguildid--promisestring--null"},(0,r.kt)("inlineCode",{parentName:"h4"},"getRandomPrompt(guildId) \u2192 {Promise<string | null>}")),(0,r.kt)("p",null,"Retrieves a random prompt for a specified guild from the database."),(0,r.kt)("h5",{id:"parameters-12"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")))),(0,r.kt)("h5",{id:"returns-12"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to a random prompt text or ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," if no prompts are found."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<string | null>")))),(0,r.kt)("h3",{id:"getrandomhourwithinactivehoursactivehoursdata-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"getRandomHourWithinActiveHours(activeHoursData)")),(0,r.kt)("h4",{id:"getrandomhourwithinactivehoursactivehoursdata--string-1"},(0,r.kt)("inlineCode",{parentName:"h4"},"getRandomHourWithinActiveHours(activeHoursData) \u2192 {string}")),(0,r.kt)("p",null,"Generates a random hour within the active operating hours for a guild."),(0,r.kt)("h5",{id:"parameters-13"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"activeHoursData")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"An object containing ",(0,r.kt)("inlineCode",{parentName:"td"},"start_time")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"end_time"),".")))),(0,r.kt)("h5",{id:"returns-13"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A formatted string representing a random hour within the active hours."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"string")))),(0,r.kt)("h2",{id:"savedb-methods"},"saveDB Methods"),(0,r.kt)("h3",{id:"fetchimagemessagesuntilpromptclient-channelid"},(0,r.kt)("inlineCode",{parentName:"h3"},"fetchImageMessagesUntilPrompt(client, channelId)")),(0,r.kt)("h4",{id:"fetchimagemessagesuntilpromptclient-channelid--promisearrayobject"},(0,r.kt)("inlineCode",{parentName:"h4"},"fetchImageMessagesUntilPrompt(client, channelId) \u2192 {Promise.<Array.<Object>>}")),(0,r.kt)("p",null,'Fetches image messages from a Discord channel until a message containing "Prompt" is found.'),(0,r.kt)("h5",{id:"parameters-14"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"client")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The Discord client object.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channelId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord channel to fetch messages.")))),(0,r.kt)("h5",{id:"returns-14"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to an array of Discord message objects containing images."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise.<Array.<Object>>")))),(0,r.kt)("h3",{id:"countreactionsmessage"},(0,r.kt)("inlineCode",{parentName:"h3"},"countReactions(message)")),(0,r.kt)("h4",{id:"countreactionsmessage--number"},(0,r.kt)("inlineCode",{parentName:"h4"},"countReactions(message) \u2192 {number}")),(0,r.kt)("p",null,"Counts the total number of reactions on a Discord message."),(0,r.kt)("h5",{id:"parameters-15"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"message")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The Discord message object.")))),(0,r.kt)("h5",{id:"returns-15"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The total count of reactions on the message."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"number")))),(0,r.kt)("h3",{id:"getimagelinkfrommessagemessage"},(0,r.kt)("inlineCode",{parentName:"h3"},"getImageLinkFromMessage(message)")),(0,r.kt)("h4",{id:"getimagelinkfrommessagemessage--string--null"},(0,r.kt)("inlineCode",{parentName:"h4"},"getImageLinkFromMessage(message) \u2192 {string | null}")),(0,r.kt)("p",null,"Extracts the image link from a Discord message, considering both attachments and embeds."),(0,r.kt)("h5",{id:"parameters-16"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"message")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The Discord message object.")))),(0,r.kt)("h5",{id:"returns-16"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A string representing the image link if found; otherwise, returns ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"string | null")))),(0,r.kt)("h3",{id:"insertresponsedatamessagedata"},(0,r.kt)("inlineCode",{parentName:"h3"},"insertResponseData(messageData)")),(0,r.kt)("h4",{id:"async-insertresponsedatamessagedata--void"},(0,r.kt)("inlineCode",{parentName:"h4"},"(async) insertResponseData(messageData) \u2192 {void}")),(0,r.kt)("p",null,"Inserts response data into the database, avoiding duplicates based on the message ID."),(0,r.kt)("h5",{id:"parameters-17"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"messageData")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"Data object for the response.")))),(0,r.kt)("h3",{id:"findtimedifferencetopromptclient-channelid-referencemessage"},(0,r.kt)("inlineCode",{parentName:"h3"},"findTimeDifferenceToPrompt(client, channelId, referenceMessage)")),(0,r.kt)("h4",{id:"async-findtimedifferencetopromptclient-channelid-referencemessage--number--null"},(0,r.kt)("inlineCode",{parentName:"h4"},"(async) findTimeDifferenceToPrompt(client, channelId, referenceMessage) \u2192 {number | null}")),(0,r.kt)("p",null,'Finds the time difference in seconds between a reference message and the first message containing the word "Prompt" within the last 100 messages in a channel.'),(0,r.kt)("h5",{id:"parameters-18"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"client")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The Discord client object.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channelId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the channel.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"referenceMessage")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The reference message object.")))),(0,r.kt)("h5",{id:"returns-17"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A number representing the time difference in seconds if a prompt message is found; otherwise, returns ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"number | null")))),(0,r.kt)("h3",{id:"savedbclient-channelid"},(0,r.kt)("inlineCode",{parentName:"h3"},"saveDB(client, channelId)")),(0,r.kt)("h4",{id:"async-savedbclient-channelid--array"},(0,r.kt)("inlineCode",{parentName:"h4"},"(async) saveDB(client, channelId) \u2192 {Array}")),(0,r.kt)("p",null,"Saves data to the database, including information about image messages, reactions, and time differences to prompts."),(0,r.kt)("h5",{id:"parameters-19"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"client")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The Discord client object.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channelId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the channel.")))),(0,r.kt)("h5",{id:"returns-18"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"An array containing data for each saved message."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Array")))),(0,r.kt)("h3",{id:"insertresponsedatamessagedata-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"insertResponseData(messageData)")),(0,r.kt)("h4",{id:"async-insertresponsedatamessagedata--void-1"},(0,r.kt)("inlineCode",{parentName:"h4"},"(async) insertResponseData(messageData) \u2192 {void}")),(0,r.kt)("p",null,"Inserts response data into the database, avoiding duplicates based on the message ID."),(0,r.kt)("h5",{id:"parameters-20"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"messageData")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"Data object for the response.")))))}s.isMDXComponent=!0}}]);