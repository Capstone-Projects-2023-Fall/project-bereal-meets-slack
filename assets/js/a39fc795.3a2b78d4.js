"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[4790],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>g});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),m=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=m(e.components);return n.createElement(o.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=m(a),u=r,g=d["".concat(o,".").concat(u)]||d[u]||c[u]||l;return a?n.createElement(g,i(i({ref:t},p),{},{components:a})):n.createElement(g,i({ref:t},p))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=u;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var m=2;m<l;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},6572:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>m});var n=a(7462),r=(a(7294),a(3905));const l={sidebar_position:15},i="Save Database Utility Module Spec",s={unversionedId:"api-specification/saveDBSpec",id:"api-specification/saveDBSpec",title:"Save Database Utility Module Spec",description:"Methods",source:"@site/docs/api-specification/saveDBSpec.md",sourceDirName:"api-specification",slug:"/api-specification/saveDBSpec",permalink:"/project-bereal-meets-slack/docs/api-specification/saveDBSpec",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Fall/project-bereal-meets-slack/edit/main/documentation/docs/api-specification/saveDBSpec.md",tags:[],version:"current",lastUpdatedBy:"Rishi Duggal",sidebarPosition:15,frontMatter:{sidebar_position:15},sidebar:"docsSidebar",previous:{title:"Timer Class Spec",permalink:"/project-bereal-meets-slack/docs/api-specification/TimerSpec"},next:{title:"Set Default Channel Utility Module Spec",permalink:"/project-bereal-meets-slack/docs/api-specification/setDefaultChannelSpec"}},o={},m=[{value:"Methods",id:"methods",level:2},{value:"<code>fetchImageMessagesUntilPrompt(client, channelId)</code>",id:"fetchimagemessagesuntilpromptclient-channelid",level:2},{value:"<code>fetchImageMessagesUntilPrompt(client, channelId) \u2192 {Promise.&lt;Array.&lt;Object&gt;&gt;}</code>",id:"fetchimagemessagesuntilpromptclient-channelid--promisearrayobject",level:4},{value:"Parameters:",id:"parameters",level:5},{value:"Returns:",id:"returns",level:5},{value:"<code>countReactions(message)</code>",id:"countreactionsmessage",level:3},{value:"<code>countReactions(message) \u2192 {number}</code>",id:"countreactionsmessage--number",level:4},{value:"Parameters:",id:"parameters-1",level:5},{value:"Returns:",id:"returns-1",level:5},{value:"<code>getImageLinkFromMessage(message)</code>",id:"getimagelinkfrommessagemessage",level:3},{value:"<code>getImageLinkFromMessage(message) \u2192 {string | null}</code>",id:"getimagelinkfrommessagemessage--string--null",level:4},{value:"Parameters:",id:"parameters-2",level:5},{value:"Returns:",id:"returns-2",level:5},{value:"<code>insertResponseData(messageData)</code>",id:"insertresponsedatamessagedata",level:3},{value:"<code>(async) insertResponseData(messageData) \u2192 {void}</code>",id:"async-insertresponsedatamessagedata--void",level:4},{value:"Parameters:",id:"parameters-3",level:5},{value:"<code>findTimeDifferenceToPrompt(client, channelId, referenceMessage)</code>",id:"findtimedifferencetopromptclient-channelid-referencemessage",level:3},{value:"<code>(async) findTimeDifferenceToPrompt(client, channelId, referenceMessage) \u2192 {number | null}</code>",id:"async-findtimedifferencetopromptclient-channelid-referencemessage--number--null",level:4},{value:"Parameters:",id:"parameters-4",level:5},{value:"Returns:",id:"returns-3",level:5},{value:"<code>saveDB(client, channelId)</code>",id:"savedbclient-channelid",level:3},{value:"<code>(async) saveDB(client, channelId) \u2192 {Array}</code>",id:"async-savedbclient-channelid--array",level:4},{value:"Parameters:",id:"parameters-5",level:5},{value:"Returns:",id:"returns-4",level:5},{value:"<code>insertResponseData(messageData)</code>",id:"insertresponsedatamessagedata-1",level:3},{value:"<code>(async) insertResponseData(messageData) \u2192 {void}</code>",id:"async-insertresponsedatamessagedata--void-1",level:4},{value:"Parameters:",id:"parameters-6",level:5}],p={toc:m};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"save-database-utility-module-spec"},"Save Database Utility Module Spec"),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h2",{id:"fetchimagemessagesuntilpromptclient-channelid"},(0,r.kt)("inlineCode",{parentName:"h2"},"fetchImageMessagesUntilPrompt(client, channelId)")),(0,r.kt)("h4",{id:"fetchimagemessagesuntilpromptclient-channelid--promisearrayobject"},(0,r.kt)("inlineCode",{parentName:"h4"},"fetchImageMessagesUntilPrompt(client, channelId) \u2192 {Promise.<Array.<Object>>}")),(0,r.kt)("p",null,'Fetches image messages from a Discord channel until a message containing "Prompt" is found.'),(0,r.kt)("h5",{id:"parameters"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"client")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The Discord client object.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channelId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord channel to fetch messages.")))),(0,r.kt)("h5",{id:"returns"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to an array of Discord message objects containing images."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise.<Array.<Object>>")))),(0,r.kt)("h3",{id:"countreactionsmessage"},(0,r.kt)("inlineCode",{parentName:"h3"},"countReactions(message)")),(0,r.kt)("h4",{id:"countreactionsmessage--number"},(0,r.kt)("inlineCode",{parentName:"h4"},"countReactions(message) \u2192 {number}")),(0,r.kt)("p",null,"Counts the total number of reactions on a Discord message."),(0,r.kt)("h5",{id:"parameters-1"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"message")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The Discord message object.")))),(0,r.kt)("h5",{id:"returns-1"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The total count of reactions on the message."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"number")))),(0,r.kt)("h3",{id:"getimagelinkfrommessagemessage"},(0,r.kt)("inlineCode",{parentName:"h3"},"getImageLinkFromMessage(message)")),(0,r.kt)("h4",{id:"getimagelinkfrommessagemessage--string--null"},(0,r.kt)("inlineCode",{parentName:"h4"},"getImageLinkFromMessage(message) \u2192 {string | null}")),(0,r.kt)("p",null,"Extracts the image link from a Discord message, considering both attachments and embeds."),(0,r.kt)("h5",{id:"parameters-2"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"message")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The Discord message object.")))),(0,r.kt)("h5",{id:"returns-2"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A string representing the image link if found; otherwise, returns ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"string | null")))),(0,r.kt)("h3",{id:"insertresponsedatamessagedata"},(0,r.kt)("inlineCode",{parentName:"h3"},"insertResponseData(messageData)")),(0,r.kt)("h4",{id:"async-insertresponsedatamessagedata--void"},(0,r.kt)("inlineCode",{parentName:"h4"},"(async) insertResponseData(messageData) \u2192 {void}")),(0,r.kt)("p",null,"Inserts response data into the database, avoiding duplicates based on the message ID."),(0,r.kt)("h5",{id:"parameters-3"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"messageData")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"Data object for the response.")))),(0,r.kt)("h3",{id:"findtimedifferencetopromptclient-channelid-referencemessage"},(0,r.kt)("inlineCode",{parentName:"h3"},"findTimeDifferenceToPrompt(client, channelId, referenceMessage)")),(0,r.kt)("h4",{id:"async-findtimedifferencetopromptclient-channelid-referencemessage--number--null"},(0,r.kt)("inlineCode",{parentName:"h4"},"(async) findTimeDifferenceToPrompt(client, channelId, referenceMessage) \u2192 {number | null}")),(0,r.kt)("p",null,'Finds the time difference in seconds between a reference message and the first message containing the word "Prompt" within the last 100 messages in a channel.'),(0,r.kt)("h5",{id:"parameters-4"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"client")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The Discord client object.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channelId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the channel.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"referenceMessage")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The reference message object.")))),(0,r.kt)("h5",{id:"returns-3"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A number representing the time difference in seconds if a prompt message is found; otherwise, returns ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"number | null")))),(0,r.kt)("h3",{id:"savedbclient-channelid"},(0,r.kt)("inlineCode",{parentName:"h3"},"saveDB(client, channelId)")),(0,r.kt)("h4",{id:"async-savedbclient-channelid--array"},(0,r.kt)("inlineCode",{parentName:"h4"},"(async) saveDB(client, channelId) \u2192 {Array}")),(0,r.kt)("p",null,"Saves data to the database, including information about image messages, reactions, and time differences to prompts."),(0,r.kt)("h5",{id:"parameters-5"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"client")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The Discord client object.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channelId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the channel.")))),(0,r.kt)("h5",{id:"returns-4"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"An array containing data for each saved message."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Array")))),(0,r.kt)("h3",{id:"insertresponsedatamessagedata-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"insertResponseData(messageData)")),(0,r.kt)("h4",{id:"async-insertresponsedatamessagedata--void-1"},(0,r.kt)("inlineCode",{parentName:"h4"},"(async) insertResponseData(messageData) \u2192 {void}")),(0,r.kt)("p",null,"Inserts response data into the database, avoiding duplicates based on the message ID."),(0,r.kt)("h5",{id:"parameters-6"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"messageData")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"Data object for the response.")))))}d.isMDXComponent=!0}}]);