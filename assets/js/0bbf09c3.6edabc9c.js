"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[2602],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>c});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),p=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=p(e.components);return n.createElement(d.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=p(a),k=r,c=m["".concat(d,".").concat(k)]||m[k]||u[k]||l;return a?n.createElement(c,i(i({ref:t},s),{},{components:a})):n.createElement(c,i({ref:t},s))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=k;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o[m]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},3019:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const l={},i=void 0,o={unversionedId:"api-specification/botAPISpec",id:"api-specification/botAPISpec",title:"botAPISpec",description:"---",source:"@site/docs/api-specification/botAPISpec.md",sourceDirName:"api-specification",slug:"/api-specification/botAPISpec",permalink:"/project-bereal-meets-slack/docs/api-specification/botAPISpec",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Fall/project-bereal-meets-slack/edit/main/documentation/docs/api-specification/botAPISpec.md",tags:[],version:"current",lastUpdatedBy:"tup31461",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Timer Class Spec",permalink:"/project-bereal-meets-slack/docs/api-specification/TimerSpec"},next:{title:"Test Procedures",permalink:"/project-bereal-meets-slack/docs/category/test-procedures"}},d={},p=[{value:"sidebar_position: 3",id:"sidebar_position-3",level:2},{value:"getRandom Methods",id:"getrandom-methods",level:2},{value:"<code>getRandomUser(guild)</code>",id:"getrandomuserguild",level:3},{value:"<code>getRandomUser(guild) \u2192 {string | null}</code>",id:"getrandomuserguild--string--null",level:4},{value:"Parameters:",id:"parameters",level:5},{value:"Returns:",id:"returns",level:5},{value:"activeHours Methods",id:"activehours-methods",level:2},{value:"<code>fetchActiveHoursFromDB(guildId)</code>",id:"fetchactivehoursfromdbguildid",level:3},{value:"<code>(async) fetchActiveHoursFromDB(guildId) \u2192 {Promise.&lt;{start_time: string, end_time: string}&gt;}</code>",id:"async-fetchactivehoursfromdbguildid--promisestart_time-string-end_time-string",level:4},{value:"Parameters:",id:"parameters-1",level:5},{value:"Returns:",id:"returns-1",level:5},{value:"<code>storeOperatingHours(guildId, startTime, endTime)</code>",id:"storeoperatinghoursguildid-starttime-endtime",level:3},{value:"<code>(async) storeOperatingHours(guildId, startTime, endTime) \u2192 {Promise.&lt;void&gt;}</code>",id:"async-storeoperatinghoursguildid-starttime-endtime--promisevoid",level:4},{value:"Parameters:",id:"parameters-2",level:5},{value:"Returns:",id:"returns-2",level:5},{value:"<code>getRandomHourWithinActiveHours(activeHoursData)</code>",id:"getrandomhourwithinactivehoursactivehoursdata",level:3},{value:"<code>getRandomHourWithinActiveHours(activeHoursData) \u2192 {string}</code>",id:"getrandomhourwithinactivehoursactivehoursdata--string",level:4},{value:"Parameters:",id:"parameters-3",level:5},{value:"Returns:",id:"returns-3",level:5},{value:"dbConn Methods",id:"dbconn-methods",level:2},{value:"<code>createConnectionPoolLocal()</code>",id:"createconnectionpoollocal",level:3},{value:"<code>createConnectionPoolLocal() \u2192 {Object}</code>",id:"createconnectionpoollocal--object",level:4},{value:"Returns:",id:"returns-4",level:5},{value:"<code>createConnectionPoolCloud()</code>",id:"createconnectionpoolcloud",level:3},{value:"<code>createConnectionPoolCloud() \u2192 {Object}</code>",id:"createconnectionpoolcloud--object",level:4},{value:"Returns:",id:"returns-5",level:5},{value:"<code>createPromiseConnectionPool()</code>",id:"createpromiseconnectionpool",level:3},{value:"<code>createPromiseConnectionPool() \u2192 {Object}</code>",id:"createpromiseconnectionpool--object",level:4},{value:"Returns:",id:"returns-6",level:5},{value:"promptTimeout Methods",id:"prompttimeout-methods",level:2},{value:"<code>setupPrompt(channelId, message, user, originalPrompt)</code>",id:"setuppromptchannelid-message-user-originalprompt",level:3},{value:"<code>setupPrompt(channelId, message, user, originalPrompt) \u2192 {void}</code>",id:"setuppromptchannelid-message-user-originalprompt--void",level:4},{value:"Parameters:",id:"parameters-4",level:5},{value:"Returns:",id:"returns-7",level:5},{value:"<code>setPromptTimeout(promptId, duration, message, expiredContent, user, originalPrompt, channelId)</code>",id:"setprompttimeoutpromptid-duration-message-expiredcontent-user-originalprompt-channelid",level:3},{value:"<code>setPromptTimeout(promptId, duration, message, expiredContent, user, originalPrompt, channelId) \u2192 {void}</code>",id:"setprompttimeoutpromptid-duration-message-expiredcontent-user-originalprompt-channelid--void",level:4},{value:"Parameters:",id:"parameters-5",level:5},{value:"Returns:",id:"returns-8",level:5},{value:"<code>handleReprompt(user, originalPrompt, channelId, originalMessage)</code>",id:"handlerepromptuser-originalprompt-channelid-originalmessage",level:3},{value:"<code>handleReprompt(user, originalPrompt, channelId, originalMessage)</code>",id:"handlerepromptuser-originalprompt-channelid-originalmessage-1",level:4},{value:"Parameters:",id:"parameters-6",level:5},{value:"Returns:",id:"returns-9",level:5},{value:"Notes:",id:"notes",level:5},{value:"promptUtils Methods",id:"promptutils-methods",level:2},{value:"<code>getPrompts(guildId)</code>",id:"getpromptsguildid",level:3},{value:"<code>getPrompts(guildId) \u2192 {Promise&lt;Array.&lt;string&gt;&gt;}</code>",id:"getpromptsguildid--promisearraystring",level:4},{value:"Parameters:",id:"parameters-7",level:5},{value:"Returns:",id:"returns-10",level:5},{value:"<code>addPrompt(guildId, prompt)</code>",id:"addpromptguildid-prompt",level:3},{value:"<code>addPrompt(guildId, prompt) \u2192 {Promise&lt;string&gt;}</code>",id:"addpromptguildid-prompt--promisestring",level:4},{value:"Parameters:",id:"parameters-8",level:5},{value:"Returns:",id:"returns-11",level:5},{value:"<code>deletePrompt(guildId, promptToDelete)</code>",id:"deletepromptguildid-prompttodelete",level:3},{value:"<code>deletePrompt(guildId, promptToDelete) \u2192 {Promise&lt;string&gt;}</code>",id:"deletepromptguildid-prompttodelete--promisestring",level:4},{value:"Parameters:",id:"parameters-9",level:5},{value:"Returns:",id:"returns-12",level:5},{value:"<code>listPrompts(guildId)</code>",id:"listpromptsguildid",level:3},{value:"<code>listPrompts(guildId) \u2192 {Promise&lt;string&gt;}</code>",id:"listpromptsguildid--promisestring",level:4},{value:"Parameters:",id:"parameters-10",level:5},{value:"Returns:",id:"returns-13",level:5},{value:"<code>searchPrompts(guildId, query)</code>",id:"searchpromptsguildid-query",level:3},{value:"<code>searchPrompts(guildId, query) \u2192 {Promise&lt;string&gt;}</code>",id:"searchpromptsguildid-query--promisestring",level:4},{value:"Parameters:",id:"parameters-11",level:5},{value:"Returns:",id:"returns-14",level:5},{value:"<code>getRandomPrompt(guildId)</code>",id:"getrandompromptguildid",level:3},{value:"<code>getRandomPrompt(guildId) \u2192 {Promise&lt;string | null&gt;}</code>",id:"getrandompromptguildid--promisestring--null",level:4},{value:"Parameters:",id:"parameters-12",level:5},{value:"Returns:",id:"returns-15",level:5},{value:"<code>fetchActiveHoursFromDB(guildId)</code>",id:"fetchactivehoursfromdbguildid-1",level:3},{value:"(async) fetchActiveHoursFromDB(guildId) \u2192 {Promise.&lt;{start_time: string, end_time: string}&gt;}",id:"async-fetchactivehoursfromdbguildid--promisestart_time-string-end_time-string-1",level:4},{value:"Parameters:",id:"parameters-13",level:5},{value:"<code>fetchActiveHoursFromDB(guildId)</code>",id:"fetchactivehoursfromdbguildid-2",level:4},{value:"Returns:",id:"returns-16",level:4},{value:"<code>getRandomHourWithinActiveHours(activeHoursData)</code>",id:"getrandomhourwithinactivehoursactivehoursdata-1",level:3},{value:"<code>getRandomHourWithinActiveHours(activeHoursData) \u2192 {string}</code>",id:"getrandomhourwithinactivehoursactivehoursdata--string-1",level:4},{value:"Parameters:",id:"parameters-14",level:5},{value:"Returns:",id:"returns-17",level:5},{value:"<code>storeOperatingHours(guildId, startTime, endTime) \u2192 {Promise.&lt;void&gt;}</code>",id:"storeoperatinghoursguildid-starttime-endtime--promisevoid",level:2},{value:"Parameters:",id:"parameters-15",level:3},{value:"Returns:",id:"returns-18",level:3},{value:"Database Conneection (dbconn.js)",id:"database-conneection-dbconnjs",level:2},{value:"Members",id:"members",level:2},{value:"<code>pool</code>",id:"pool",level:2},{value:"Type:",id:"type",level:3},{value:"Description:",id:"description",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>createConnectionPoolCloud() \u2192 {Object}</code>",id:"createconnectionpoolcloud--object-1",level:2},{value:"Description:",id:"description-1",level:3},{value:"Returns:",id:"returns-19",level:3},{value:"<code>createConnectionPoolLocal() \u2192 {Object}</code>",id:"createconnectionpoollocal--object-1",level:2},{value:"Description:",id:"description-2",level:3},{value:"Returns:",id:"returns-20",level:3},{value:"<code>createPromiseConnectionPool() \u2192 {Object}</code>",id:"createpromiseconnectionpool--object-1",level:2},{value:"Description:",id:"description-3",level:3},{value:"Returns:",id:"returns-21",level:3},{value:"activeHours Module",id:"activehours-module",level:2},{value:"Methods",id:"methods-1",level:5},{value:"<code>fetchActiveHoursFromDB(guildId)</code>",id:"fetchactivehoursfromdbguildid-3",level:3},{value:"<code>(async) fetchActiveHoursFromDB(guildId) \u2192 {Promise.&lt;{start_time: string, end_time: string}&gt;}</code>",id:"async-fetchactivehoursfromdbguildid--promisestart_time-string-end_time-string-2",level:4},{value:"Parameters:",id:"parameters-16",level:5},{value:"Returns:",id:"returns-22",level:5},{value:"<code>storeOperatingHours(guildId, startTime, endTime)</code>",id:"storeoperatinghoursguildid-starttime-endtime-1",level:3},{value:"<code>(async) storeOperatingHours(guildId, startTime, endTime) \u2192 {Promise.&lt;void&gt;}</code>",id:"async-storeoperatinghoursguildid-starttime-endtime--promisevoid-1",level:4},{value:"Parameters:",id:"parameters-17",level:5},{value:"Returns:",id:"returns-23",level:5},{value:"<code>getRandomHourWithinActiveHours(activeHoursData)</code>",id:"getrandomhourwithinactivehoursactivehoursdata-2",level:3},{value:"<code>getRandomHourWithinActiveHours(activeHoursData) \u2192 {string}</code>",id:"getrandomhourwithinactivehoursactivehoursdata--string-2",level:4},{value:"Parameters:",id:"parameters-18",level:5},{value:"Returns:",id:"returns-24",level:5},{value:"blacklistUtils Methods",id:"blacklistutils-methods",level:2},{value:"<code>blacklistAddUser(guildId, dbuser)</code>",id:"blacklistadduserguildid-dbuser",level:3},{value:"<code>blacklistAddUser(guildId, dbuser) \u2192 {Promise&lt;number&gt;}</code>",id:"blacklistadduserguildid-dbuser--promisenumber",level:4},{value:"Parameters:",id:"parameters-19",level:5},{value:"Returns:",id:"returns-25",level:5},{value:"<code>blacklistDeleteUser(guildId, dbuser)</code>",id:"blacklistdeleteuserguildid-dbuser",level:3},{value:"<code>blacklistDeleteUser(guildId, dbuser) \u2192 {Promise.&lt;number&gt;}</code>",id:"blacklistdeleteuserguildid-dbuser--promisenumber",level:4},{value:"Parameters:",id:"parameters-20",level:5},{value:"Returns:",id:"returns-26",level:5},{value:"<code>blacklistListUsers(guildId)</code>",id:"blacklistlistusersguildid",level:3},{value:"<code>blacklistListUsers(guildId) \u2192 {Promise.&lt;Array.&lt;string&gt;&gt;}</code>",id:"blacklistlistusersguildid--promisearraystring",level:4},{value:"Parameters:",id:"parameters-21",level:5},{value:"Returns:",id:"returns-27",level:5},{value:"dataGraph Methods",id:"datagraph-methods",level:2},{value:"<code>fetchDataForGraph(guildId)</code>",id:"fetchdataforgraphguildid",level:3},{value:"<code>fetchDataForGraph(guildId) \u2192 {Promise.&lt;Array&lt;Object&gt;&gt;}</code>",id:"fetchdataforgraphguildid--promisearrayobject",level:4},{value:"Parameters:",id:"parameters-22",level:5},{value:"Returns:",id:"returns-28",level:5},{value:"<code>generateGraph(data)</code>",id:"generategraphdata",level:3},{value:"<code>generateGraph(data) \u2192 {Promise.&lt;Buffer&gt;}</code>",id:"generategraphdata--promisebuffer",level:4},{value:"Parameters:",id:"parameters-23",level:5},{value:"Returns:",id:"returns-29",level:5},{value:"dbConn Methods",id:"dbconn-methods-1",level:2},{value:"<code>createConnectionPoolLocal()</code>",id:"createconnectionpoollocal-1",level:3},{value:"<code>createConnectionPoolLocal() \u2192 {Object}</code>",id:"createconnectionpoollocal--object-2",level:4},{value:"Returns:",id:"returns-30",level:5},{value:"<code>createConnectionPoolCloud()</code>",id:"createconnectionpoolcloud-1",level:3},{value:"<code>createConnectionPoolCloud() \u2192 {Object}</code>",id:"createconnectionpoolcloud--object-2",level:4},{value:"Returns:",id:"returns-31",level:5},{value:"<code>createPromiseConnectionPool()</code>",id:"createpromiseconnectionpool-1",level:3},{value:"<code>createPromiseConnectionPool() \u2192 {Object}</code>",id:"createpromiseconnectionpool--object-2",level:4},{value:"Returns:",id:"returns-32",level:5},{value:"getRandom Methods",id:"getrandom-methods-1",level:2},{value:"<code>getRandomUser(guild)</code>",id:"getrandomuserguild-1",level:3},{value:"<code>getRandomUser(guild) \u2192 {string | null}</code>",id:"getrandomuserguild--string--null-1",level:4},{value:"Parameters:",id:"parameters-24",level:5},{value:"Returns:",id:"returns-33",level:5},{value:"handleUserSubmission Methods",id:"handleusersubmission-methods",level:2},{value:"<code>handleUserSubmission(attachment, caption, interaction)</code>",id:"handleusersubmissionattachment-caption-interaction",level:3},{value:"Parameters:",id:"parameters-25",level:4},{value:"Execution:",id:"execution",level:4},{value:"Deny Flow:",id:"deny-flow",level:4},{value:"Approval Flow:",id:"approval-flow",level:4},{value:"helpUtils Methods",id:"helputils-methods",level:2},{value:"<code>getHelpMessageMod()</code>",id:"gethelpmessagemod",level:3},{value:"<code>getHelpMessageMod() \u2192 {string}</code>",id:"gethelpmessagemod--string",level:4},{value:"Returns:",id:"returns-34",level:5},{value:"<code>getHelpMessageUser()</code>",id:"gethelpmessageuser",level:3},{value:"<code>getHelpMessageUser() \u2192 {string}</code>",id:"gethelpmessageuser--string",level:4},{value:"Returns:",id:"returns-35",level:5},{value:"notifyMods Methods",id:"notifymods-methods",level:2},{value:"<code>notifyMods(guild, content, caption, author, attachments)</code>",id:"notifymodsguild-content-caption-author-attachments",level:3},{value:"<code>notifyMods(guild, content, caption, author, attachments) \u2192 {Object}</code>",id:"notifymodsguild-content-caption-author-attachments--object",level:4},{value:"Parameters:",id:"parameters-26",level:5},{value:"Returns:",id:"returns-36",level:5},{value:"postPrompt Methods",id:"postprompt-methods",level:2},{value:"<code>postPrompt(guildId, client, callingUser)</code>",id:"postpromptguildid-client-callinguser",level:3},{value:"<code>postPrompt(guildId, client, callingUser) \u2192 {void}</code>",id:"postpromptguildid-client-callinguser--void",level:4},{value:"Parameters:",id:"parameters-27",level:5},{value:"promptTimeout Methods",id:"prompttimeout-methods-1",level:2},{value:"<code>setupPrompt(channelId, message, user, originalPrompt)</code>",id:"setuppromptchannelid-message-user-originalprompt-1",level:3},{value:"<code>setupPrompt(channelId, message, user, originalPrompt) \u2192 {void}</code>",id:"setuppromptchannelid-message-user-originalprompt--void-1",level:4},{value:"Parameters:",id:"parameters-28",level:5},{value:"<code>schedulePost(activeHoursData, guildId, client)</code>",id:"schedulepostactivehoursdata-guildid-client",level:3},{value:"<code>schedulePost(activeHoursData, guildId, client) \u2192 {void}</code>",id:"schedulepostactivehoursdata-guildid-client--void",level:4},{value:"Parameters:",id:"parameters-29",level:5},{value:"Prompt Class",id:"prompt-class",level:2},{value:"<code>Prompt</code>",id:"prompt",level:3},{value:"Description:",id:"description-4",level:4},{value:"Properties:",id:"properties",level:5},{value:"Methods:",id:"methods-2",level:4},{value:"<code>isUserIdMatch(userId)</code>",id:"isuseridmatchuserid",level:5},{value:"Parameters:",id:"parameters-30",level:6},{value:"Returns:",id:"returns-37",level:6},{value:"<code>setPrompt(msg)</code>",id:"setpromptmsg",level:5},{value:"Parameters:",id:"parameters-31",level:6},{value:"<code>setUserId(userId)</code>",id:"setuseriduserid",level:5},{value:"Parameters:",id:"parameters-32",level:6},{value:"<code>setChannel(channel)</code>",id:"setchannelchannel",level:5},{value:"Parameters:",id:"parameters-33",level:6},{value:"<code>getPrompt()</code>",id:"getprompt",level:5},{value:"Returns:",id:"returns-38",level:6},{value:"<code>getUserId()</code>",id:"getuserid",level:5},{value:"Returns:",id:"returns-39",level:6},{value:"<code>getChannel()</code>",id:"getchannel",level:5},{value:"Returns:",id:"returns-40",level:6},{value:"promptTimeout Class",id:"prompttimeout-class",level:2},{value:"<code>PromptTimeout</code>",id:"prompttimeout",level:3},{value:"<code>constructor(client)</code>",id:"constructorclient",level:3},{value:"Description:",id:"description-5",level:4},{value:"Parameters:",id:"parameters-34",level:5},{value:"Methods",id:"methods-3",level:2},{value:"<code>setupPrompt(channelId, message, user, originalPrompt)</code>",id:"setuppromptchannelid-message-user-originalprompt-2",level:3},{value:"<code>setupPrompt(channelId, message, user, originalPrompt) \u2192 {void}</code>",id:"setuppromptchannelid-message-user-originalprompt--void-2",level:4},{value:"Description:",id:"description-6",level:4},{value:"Parameters:",id:"parameters-35",level:5},{value:"Parameters:",id:"parameters-36",level:5},{value:"<code>setPromptTimeout(promptId, duration, message, expiredContent, user, originalPrompt, channelId)</code>",id:"setprompttimeoutpromptid-duration-message-expiredcontent-user-originalprompt-channelid-1",level:3},{value:"<code>setPromptTimeout(promptId, duration, message, expiredContent, user, originalPrompt, channelId) \u2192 {void}</code>",id:"setprompttimeoutpromptid-duration-message-expiredcontent-user-originalprompt-channelid--void-1",level:4},{value:"Parameters:",id:"parameters-37",level:5},{value:"<code>handleReprompt(user, originalPrompt, channelId, originalMessage)</code>",id:"handlerepromptuser-originalprompt-channelid-originalmessage-2",level:3},{value:"<code>handleReprompt(user, originalPrompt, channelId, originalMessage)</code>",id:"handlerepromptuser-originalprompt-channelid-originalmessage-3",level:4},{value:"Parameters:",id:"parameters-38",level:5},{value:"promptUtils Methods",id:"promptutils-methods-1",level:2},{value:"<code>getPrompts(guildId)</code>",id:"getpromptsguildid-1",level:3},{value:"<code>getPrompts(guildId) \u2192 {Promise&lt;Array.&lt;string&gt;&gt;}</code>",id:"getpromptsguildid--promisearraystring-1",level:4},{value:"Parameters:",id:"parameters-39",level:5},{value:"Returns:",id:"returns-41",level:5},{value:"<code>addPrompt(guildId, prompt)</code>",id:"addpromptguildid-prompt-1",level:3},{value:"<code>addPrompt(guildId, prompt) \u2192 {Promise&lt;string&gt;}</code>",id:"addpromptguildid-prompt--promisestring-1",level:4},{value:"Parameters:",id:"parameters-40",level:5},{value:"Returns:",id:"returns-42",level:5},{value:"<code>deletePrompt(guildId, promptToDelete)</code>",id:"deletepromptguildid-prompttodelete-1",level:3},{value:"<code>deletePrompt(guildId, promptToDelete) \u2192 {Promise&lt;string&gt;}</code>",id:"deletepromptguildid-prompttodelete--promisestring-1",level:4},{value:"Parameters:",id:"parameters-41",level:5},{value:"Returns:",id:"returns-43",level:5},{value:"<code>listPrompts(guildId)</code>",id:"listpromptsguildid-1",level:3},{value:"<code>listPrompts(guildId) \u2192 {Promise&lt;string&gt;}</code>",id:"listpromptsguildid--promisestring-1",level:4},{value:"Parameters:",id:"parameters-42",level:5},{value:"Returns:",id:"returns-44",level:5},{value:"<code>searchPrompts(guildId, query)</code>",id:"searchpromptsguildid-query-1",level:3},{value:"<code>searchPrompts(guildId, query) \u2192 {Promise&lt;string&gt;}</code>",id:"searchpromptsguildid-query--promisestring-1",level:4},{value:"Parameters:",id:"parameters-43",level:5},{value:"Returns:",id:"returns-45",level:5},{value:"<code>getRandomPrompt(guildId)</code>",id:"getrandompromptguildid-1",level:3},{value:"<code>getRandomPrompt(guildId) \u2192 {Promise&lt;string | null&gt;}</code>",id:"getrandompromptguildid--promisestring--null-1",level:4},{value:"Parameters:",id:"parameters-44",level:5},{value:"Returns:",id:"returns-46",level:5},{value:"<code>getRandomHourWithinActiveHours(activeHoursData)</code>",id:"getrandomhourwithinactivehoursactivehoursdata-3",level:3},{value:"<code>getRandomHourWithinActiveHours(activeHoursData) \u2192 {string}</code>",id:"getrandomhourwithinactivehoursactivehoursdata--string-3",level:4},{value:"Parameters:",id:"parameters-45",level:5},{value:"Returns:",id:"returns-47",level:5},{value:"saveDB Methods",id:"savedb-methods",level:2},{value:"saveDB Methods",id:"savedb-methods-1",level:2},{value:"<code>fetchImageMessagesUntilPrompt(client, channelId) \u2192 {Promise.&lt;Array.&lt;Object&gt;&gt;}</code>",id:"fetchimagemessagesuntilpromptclient-channelid--promisearrayobject",level:4},{value:"Parameters:",id:"parameters-46",level:5},{value:"Returns:",id:"returns-48",level:5},{value:"<code>countReactions(message) \u2192 {number}</code>",id:"countreactionsmessage--number",level:4},{value:"Parameters:",id:"parameters-47",level:5},{value:"Returns:",id:"returns-49",level:5},{value:"<code>getImageLinkFromMessage(message) \u2192 {string | null}</code>",id:"getimagelinkfrommessagemessage--string--null",level:4},{value:"Parameters:",id:"parameters-48",level:5},{value:"Returns:",id:"returns-50",level:5},{value:"<code>insertResponseData(messageData)</code>",id:"insertresponsedatamessagedata",level:3},{value:"<code>(async) insertResponseData(messageData) \u2192 {void}</code>",id:"async-insertresponsedatamessagedata--void",level:4},{value:"Parameters:",id:"parameters-49",level:5},{value:"<code>findTimeDifferenceToPrompt(client, channelId, referenceMessage)</code>",id:"findtimedifferencetopromptclient-channelid-referencemessage",level:3},{value:"<code>(async) findTimeDifferenceToPrompt(client, channelId, referenceMessage) \u2192 {number | null}</code>",id:"async-findtimedifferencetopromptclient-channelid-referencemessage--number--null",level:4},{value:"Parameters:",id:"parameters-50",level:5},{value:"Returns:",id:"returns-51",level:5},{value:"<code>saveDB(client, channelId)</code>",id:"savedbclient-channelid",level:3},{value:"<code>(async) saveDB(client, channelId) \u2192 {Array}</code>",id:"async-savedbclient-channelid--array",level:4},{value:"Parameters:",id:"parameters-51",level:5},{value:"Returns:",id:"returns-52",level:5},{value:"<code>insertResponseData(messageData)</code>",id:"insertresponsedatamessagedata-1",level:3},{value:"<code>(async) insertResponseData(messageData) \u2192 {void}</code>",id:"async-insertresponsedatamessagedata--void-1",level:4},{value:"Parameters:",id:"parameters-52",level:5},{value:"setDefaultChannel Methods",id:"setdefaultchannel-methods",level:2},{value:"Function",id:"function",level:2},{value:"<code>setDefaultChannel(channelId, guildId)</code>",id:"setdefaultchannelchannelid-guildid",level:3},{value:"Description:",id:"description-7",level:4},{value:"Parameters:",id:"parameters-53",level:5},{value:"Returns:",id:"returns-53",level:5},{value:"<code>Timer</code>",id:"timer",level:2},{value:"Constructor",id:"constructor",level:3},{value:"<code>constructor()</code>",id:"constructor-1",level:4},{value:"Description:",id:"description-8",level:5},{value:"Properties:",id:"properties-1",level:5},{value:"Methods",id:"methods-4",level:3},{value:"<code>start()</code>",id:"start",level:4},{value:"Description:",id:"description-9",level:5},{value:"<code>stop()</code>",id:"stop",level:4},{value:"Description:",id:"description-10",level:5},{value:"Returns:",id:"returns-54",level:5},{value:"Throws:",id:"throws",level:5},{value:"<code>isRunning()</code>",id:"isrunning",level:4},{value:"Description:",id:"description-11",level:5},{value:"Returns:",id:"returns-55",level:5},{value:"Returns:",id:"returns-56",level:5}],s={toc:p};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"sidebar_position-3"},"sidebar_position: 3"),(0,r.kt)("h1",{id:"bot-api-spec"},"Bot Api Spec"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Introduction"),"\nThis outlines the API specification for the Bot. It provides details on the methods available, their parameters, return values, and the usage."),(0,r.kt)("h2",{id:"getrandom-methods"},"getRandom Methods"),(0,r.kt)("h3",{id:"getrandomuserguild"},(0,r.kt)("inlineCode",{parentName:"h3"},"getRandomUser(guild)")),(0,r.kt)("h4",{id:"getrandomuserguild--string--null"},(0,r.kt)("inlineCode",{parentName:"h4"},"getRandomUser(guild) \u2192 {string | null}")),(0,r.kt)("p",null,"Generates a random non-blacklisted, non-bot user ID from a guild's members."),(0,r.kt)("h5",{id:"parameters"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guild")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The Discord guild object.")))),(0,r.kt)("h5",{id:"returns"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A string representing the user ID of a randomly selected non-blacklisted, non-bot user.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," if no eligible non-bot users are found."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"string | null")))),(0,r.kt)("h2",{id:"activehours-methods"},"activeHours Methods"),(0,r.kt)("h3",{id:"fetchactivehoursfromdbguildid"},(0,r.kt)("inlineCode",{parentName:"h3"},"fetchActiveHoursFromDB(guildId)")),(0,r.kt)("h4",{id:"async-fetchactivehoursfromdbguildid--promisestart_time-string-end_time-string"},(0,r.kt)("inlineCode",{parentName:"h4"},"(async) fetchActiveHoursFromDB(guildId) \u2192 {Promise.<{start_time: string, end_time: string}>}")),(0,r.kt)("p",null,"Fetches active operating hours for a guild from the database."),(0,r.kt)("h5",{id:"parameters-1"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")))),(0,r.kt)("h5",{id:"returns-1"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to an object containing ",(0,r.kt)("inlineCode",{parentName:"p"},"start_time")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"end_time")," representing the active operating hours for the guild."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise.<{start_time: string, end_time: string}>")))),(0,r.kt)("h3",{id:"storeoperatinghoursguildid-starttime-endtime"},(0,r.kt)("inlineCode",{parentName:"h3"},"storeOperatingHours(guildId, startTime, endTime)")),(0,r.kt)("h4",{id:"async-storeoperatinghoursguildid-starttime-endtime--promisevoid"},(0,r.kt)("inlineCode",{parentName:"h4"},"(async) storeOperatingHours(guildId, startTime, endTime) \u2192 {Promise.<void>}")),(0,r.kt)("p",null,"Stores or updates operating hours for a guild in the database."),(0,r.kt)("h5",{id:"parameters-2"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"startTime")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The start time of the operating hours.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"endTime")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The end time of the operating hours.")))),(0,r.kt)("h5",{id:"returns-2"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A Promise that resolves when the operating hours are successfully stored or updated."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<void>")))),(0,r.kt)("h3",{id:"getrandomhourwithinactivehoursactivehoursdata"},(0,r.kt)("inlineCode",{parentName:"h3"},"getRandomHourWithinActiveHours(activeHoursData)")),(0,r.kt)("h4",{id:"getrandomhourwithinactivehoursactivehoursdata--string"},(0,r.kt)("inlineCode",{parentName:"h4"},"getRandomHourWithinActiveHours(activeHoursData) \u2192 {string}")),(0,r.kt)("p",null,"Generates a random hour within the active operating hours for a guild."),(0,r.kt)("h5",{id:"parameters-3"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"activeHoursData")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"An object containing ",(0,r.kt)("inlineCode",{parentName:"td"},"start_time")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"end_time"),".")))),(0,r.kt)("h5",{id:"returns-3"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A formatted string representing a random hour within the active hours."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"string")))),(0,r.kt)("h2",{id:"dbconn-methods"},"dbConn Methods"),(0,r.kt)("h3",{id:"createconnectionpoollocal"},(0,r.kt)("inlineCode",{parentName:"h3"},"createConnectionPoolLocal()")),(0,r.kt)("h4",{id:"createconnectionpoollocal--object"},(0,r.kt)("inlineCode",{parentName:"h4"},"createConnectionPoolLocal() \u2192 {Object}")),(0,r.kt)("p",null,"Creates a connection pool for local database calls during testing."),(0,r.kt)("h5",{id:"returns-4"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"MySQL connection pool object."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")))),(0,r.kt)("h3",{id:"createconnectionpoolcloud"},(0,r.kt)("inlineCode",{parentName:"h3"},"createConnectionPoolCloud()")),(0,r.kt)("h4",{id:"createconnectionpoolcloud--object"},(0,r.kt)("inlineCode",{parentName:"h4"},"createConnectionPoolCloud() \u2192 {Object}")),(0,r.kt)("p",null,"Creates a connection pool for cloud database calls."),(0,r.kt)("h5",{id:"returns-5"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"An object representing a MySQL connection pool."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")))),(0,r.kt)("h3",{id:"createpromiseconnectionpool"},(0,r.kt)("inlineCode",{parentName:"h3"},"createPromiseConnectionPool()")),(0,r.kt)("h4",{id:"createpromiseconnectionpool--object"},(0,r.kt)("inlineCode",{parentName:"h4"},"createPromiseConnectionPool() \u2192 {Object}")),(0,r.kt)("p",null,"Creates a promise-based connection pool based on the specified environment flag."),(0,r.kt)("h5",{id:"returns-6"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A Promise-based MySQL connection pool."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")))),(0,r.kt)("h2",{id:"prompttimeout-methods"},"promptTimeout Methods"),(0,r.kt)("h3",{id:"setuppromptchannelid-message-user-originalprompt"},(0,r.kt)("inlineCode",{parentName:"h3"},"setupPrompt(channelId, message, user, originalPrompt)")),(0,r.kt)("h4",{id:"setuppromptchannelid-message-user-originalprompt--void"},(0,r.kt)("inlineCode",{parentName:"h4"},"setupPrompt(channelId, message, user, originalPrompt) \u2192 {void}")),(0,r.kt)("p",null,"Sets up a timed prompt in a specific channel for user interaction."),(0,r.kt)("h5",{id:"parameters-4"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channelId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord channel where the prompt is set up.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"message")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The message content for the prompt.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"user")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The Discord user object for whom the prompt is set up.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"originalPrompt")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The original prompt object or content for reference.")))),(0,r.kt)("h5",{id:"returns-7"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"This function does not return a value.")),(0,r.kt)("h3",{id:"setprompttimeoutpromptid-duration-message-expiredcontent-user-originalprompt-channelid"},(0,r.kt)("inlineCode",{parentName:"h3"},"setPromptTimeout(promptId, duration, message, expiredContent, user, originalPrompt, channelId)")),(0,r.kt)("h4",{id:"setprompttimeoutpromptid-duration-message-expiredcontent-user-originalprompt-channelid--void"},(0,r.kt)("inlineCode",{parentName:"h4"},"setPromptTimeout(promptId, duration, message, expiredContent, user, originalPrompt, channelId) \u2192 {void}")),(0,r.kt)("p",null,"Sets a timeout for a prompt identified by ",(0,r.kt)("inlineCode",{parentName:"p"},"promptId"),"."),(0,r.kt)("h5",{id:"parameters-5"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"promptId")),(0,r.kt)("td",{parentName:"tr",align:null},"any"),(0,r.kt)("td",{parentName:"tr",align:null},"Identifier for the prompt.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"duration")),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"Duration of the timeout in milliseconds.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"message")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"Discord message object associated with the prompt.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"expiredContent")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Content to display when the prompt expires.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"user")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"Discord user object associated with the prompt.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"originalPrompt")),(0,r.kt)("td",{parentName:"tr",align:null},"any"),(0,r.kt)("td",{parentName:"tr",align:null},"Original prompt content.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channelId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"ID of the Discord channel where the prompt is active.")))),(0,r.kt)("h5",{id:"returns-8"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Void??"),(0,r.kt)("li",{parentName:"ul"},"This function does not return a value.")),(0,r.kt)("h3",{id:"handlerepromptuser-originalprompt-channelid-originalmessage"},(0,r.kt)("inlineCode",{parentName:"h3"},"handleReprompt(user, originalPrompt, channelId, originalMessage)")),(0,r.kt)("h4",{id:"handlerepromptuser-originalprompt-channelid-originalmessage-1"},(0,r.kt)("inlineCode",{parentName:"h4"},"handleReprompt(user, originalPrompt, channelId, originalMessage)")),(0,r.kt)("p",null,"Handles reprompting the user."),(0,r.kt)("h5",{id:"parameters-6"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"user")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The user object.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"originalPrompt")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The original prompt message.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channelId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the channel where the reprompt message will be sent.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"originalMessage")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The original message that triggered the reprompt.")))),(0,r.kt)("h5",{id:"returns-9"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"No direct return value.")),(0,r.kt)("h5",{id:"notes"},"Notes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Sets up a reprompt by creating a unique identifier and setting a timeout."),(0,r.kt)("li",{parentName:"ul"},"Sends a reprompt message to the user in the specified channel with the original prompt."),(0,r.kt)("li",{parentName:"ul"},"Deletes the reprompt message after the specified reprompt duration.")),(0,r.kt)("h2",{id:"promptutils-methods"},"promptUtils Methods"),(0,r.kt)("h3",{id:"getpromptsguildid"},(0,r.kt)("inlineCode",{parentName:"h3"},"getPrompts(guildId)")),(0,r.kt)("h4",{id:"getpromptsguildid--promisearraystring"},(0,r.kt)("inlineCode",{parentName:"h4"},"getPrompts(guildId) \u2192 {Promise<Array.<string>>}")),(0,r.kt)("p",null,"Retrieves a list of prompts for a specified guild from the database."),(0,r.kt)("h5",{id:"parameters-7"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")))),(0,r.kt)("h5",{id:"returns-10"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to an array of prompt texts."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<Array.<string>>")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"addpromptguildid-prompt"},(0,r.kt)("inlineCode",{parentName:"h3"},"addPrompt(guildId, prompt)")),(0,r.kt)("h4",{id:"addpromptguildid-prompt--promisestring"},(0,r.kt)("inlineCode",{parentName:"h4"},"addPrompt(guildId, prompt) \u2192 {Promise<string>}")),(0,r.kt)("p",null,"Adds a new prompt to the database for a specified guild."),(0,r.kt)("h5",{id:"parameters-8"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"prompt")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The text of the prompt to be added.")))),(0,r.kt)("h5",{id:"returns-11"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to a message confirming the addition of the prompt."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<string>")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"deletepromptguildid-prompttodelete"},(0,r.kt)("inlineCode",{parentName:"h3"},"deletePrompt(guildId, promptToDelete)")),(0,r.kt)("h4",{id:"deletepromptguildid-prompttodelete--promisestring"},(0,r.kt)("inlineCode",{parentName:"h4"},"deletePrompt(guildId, promptToDelete) \u2192 {Promise<string>}")),(0,r.kt)("p",null,"Deletes a prompt from the database for a specified guild."),(0,r.kt)("h5",{id:"parameters-9"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"promptToDelete")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The text of the prompt to be deleted or matched.")))),(0,r.kt)("h5",{id:"returns-12"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to a message confirming the deletion or suggesting similar prompts."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<string>")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"listpromptsguildid"},(0,r.kt)("inlineCode",{parentName:"h3"},"listPrompts(guildId)")),(0,r.kt)("h4",{id:"listpromptsguildid--promisestring"},(0,r.kt)("inlineCode",{parentName:"h4"},"listPrompts(guildId) \u2192 {Promise<string>}")),(0,r.kt)("p",null,"Retrieves and lists all prompts for a specified guild."),(0,r.kt)("h5",{id:"parameters-10"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")))),(0,r.kt)("h5",{id:"returns-13"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to a string listing all prompts."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<string>")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"searchpromptsguildid-query"},(0,r.kt)("inlineCode",{parentName:"h3"},"searchPrompts(guildId, query)")),(0,r.kt)("h4",{id:"searchpromptsguildid-query--promisestring"},(0,r.kt)("inlineCode",{parentName:"h4"},"searchPrompts(guildId, query) \u2192 {Promise<string>}")),(0,r.kt)("p",null,"Searches for prompts that match a specified query for a specified guild."),(0,r.kt)("h5",{id:"parameters-11"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"query")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The search query.")))),(0,r.kt)("h5",{id:"returns-14"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to a string listing matching prompts or suggesting alternatives."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<string>")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getrandompromptguildid"},(0,r.kt)("inlineCode",{parentName:"h3"},"getRandomPrompt(guildId)")),(0,r.kt)("h4",{id:"getrandompromptguildid--promisestring--null"},(0,r.kt)("inlineCode",{parentName:"h4"},"getRandomPrompt(guildId) \u2192 {Promise<string | null>}")),(0,r.kt)("p",null,"Retrieves a random prompt for a specified guild from the database."),(0,r.kt)("h5",{id:"parameters-12"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")))),(0,r.kt)("h5",{id:"returns-15"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to a random prompt text or ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," if no prompts are found."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<string | null>")))),(0,r.kt)("p",null,"==========================================================="),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Bot Methods")),(0,r.kt)("h3",{id:"fetchactivehoursfromdbguildid-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"fetchActiveHoursFromDB(guildId)")),(0,r.kt)("h4",{id:"async-fetchactivehoursfromdbguildid--promisestart_time-string-end_time-string-1"},"(async) fetchActiveHoursFromDB(guildId) \u2192 {Promise.<{start_time: string, end_time: string}>}"),(0,r.kt)("p",null,"Fetches active operating hours for a guild from the database."),(0,r.kt)("h5",{id:"parameters-13"},"Parameters:"),(0,r.kt)("h4",{id:"fetchactivehoursfromdbguildid-2"},(0,r.kt)("inlineCode",{parentName:"h4"},"fetchActiveHoursFromDB(guildId)")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")))),(0,r.kt)("h4",{id:"returns-16"},"Returns:"),(0,r.kt)("p",null,"A Promise that resolves to an object with ",(0,r.kt)("inlineCode",{parentName:"p"},"start_time")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"end_time")," properties."),(0,r.kt)("h3",{id:"getrandomhourwithinactivehoursactivehoursdata-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"getRandomHourWithinActiveHours(activeHoursData)")),(0,r.kt)("h4",{id:"getrandomhourwithinactivehoursactivehoursdata--string-1"},(0,r.kt)("inlineCode",{parentName:"h4"},"getRandomHourWithinActiveHours(activeHoursData) \u2192 {string}")),(0,r.kt)("p",null,"Generates a random hour within the active operating hours for a guild."),(0,r.kt)("h5",{id:"parameters-14"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"activeHoursData")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"An object containing ",(0,r.kt)("inlineCode",{parentName:"td"},"start_time")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"end_time"),".")))),(0,r.kt)("h5",{id:"returns-17"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A formatted string representing a random hour within the active hours."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"string")))),(0,r.kt)("p",null,"<<<<<<< HEAD"),(0,r.kt)("h2",{id:"storeoperatinghoursguildid-starttime-endtime--promisevoid"},(0,r.kt)("inlineCode",{parentName:"h2"},"storeOperatingHours(guildId, startTime, endTime) \u2192 {Promise.<void>}")),(0,r.kt)("p",null,"<<<<<<< HEAD\nStores or updates operating hours for a guild in the database."),(0,r.kt)("h3",{id:"parameters-15"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"startTime")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The starting time of operating hours.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"endTime")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ending time of operating hours.")))),(0,r.kt)("h3",{id:"returns-18"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A Promise that resolves when the operation is complete.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise.<void>")),(0,r.kt)("h2",{id:"database-conneection-dbconnjs"},"Database Conneection (dbconn.js)"),(0,r.kt)("h2",{id:"members"},"Members"),(0,r.kt)("h2",{id:"pool"},(0,r.kt)("inlineCode",{parentName:"h2"},"pool")),(0,r.kt)("h3",{id:"type"},"Type:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Object"))),(0,r.kt)("h3",{id:"description"},"Description:"),(0,r.kt)("p",null,"The MySQL connection pool used throughout the Discord bot."),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h2",{id:"createconnectionpoolcloud--object-1"},(0,r.kt)("inlineCode",{parentName:"h2"},"createConnectionPoolCloud() \u2192 {Object}")),(0,r.kt)("h3",{id:"description-1"},"Description:"),(0,r.kt)("p",null,"Creates a connection pool for cloud database calls."),(0,r.kt)("h3",{id:"returns-19"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"MySQL connection pool."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")))),(0,r.kt)("h2",{id:"createconnectionpoollocal--object-1"},(0,r.kt)("inlineCode",{parentName:"h2"},"createConnectionPoolLocal() \u2192 {Object}")),(0,r.kt)("h3",{id:"description-2"},"Description:"),(0,r.kt)("p",null,"Creates a connection pool for local database calls during testing."),(0,r.kt)("h3",{id:"returns-20"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"MySQL connection pool."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")))),(0,r.kt)("h2",{id:"createpromiseconnectionpool--object-1"},(0,r.kt)("inlineCode",{parentName:"h2"},"createPromiseConnectionPool() \u2192 {Object}")),(0,r.kt)("h3",{id:"description-3"},"Description:"),(0,r.kt)("p",null,"Creates a promise-based connection pool based on the specified environment flag."),(0,r.kt)("h3",{id:"returns-21"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Promise-based MySQL connection pool."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")))),(0,r.kt)("p",null,"<<<<<<< HEAD"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Bot Methods")),(0,r.kt)("blockquote",null,(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("h1",{parentName:"blockquote",id:"ebfa7b8-active-hours-methods-documented"},"ebfa7b8 (active hours methods documented)"),(0,r.kt)("p",{parentName:"blockquote"},"4b724cc (util api spec update)")))))))),(0,r.kt)("h2",{id:"activehours-module"},"activeHours Module"),(0,r.kt)("h5",{id:"methods-1"},"Methods"),(0,r.kt)("h3",{id:"fetchactivehoursfromdbguildid-3"},(0,r.kt)("inlineCode",{parentName:"h3"},"fetchActiveHoursFromDB(guildId)")),(0,r.kt)("h4",{id:"async-fetchactivehoursfromdbguildid--promisestart_time-string-end_time-string-2"},(0,r.kt)("inlineCode",{parentName:"h4"},"(async) fetchActiveHoursFromDB(guildId) \u2192 {Promise.<{start_time: string, end_time: string}>}")),(0,r.kt)("p",null,"Fetches active operating hours for a guild from the database."),(0,r.kt)("h5",{id:"parameters-16"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")))),(0,r.kt)("h5",{id:"returns-22"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to an object containing ",(0,r.kt)("inlineCode",{parentName:"p"},"start_time")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"end_time")," representing the active operating hours for the guild."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise.<{start_time: string, end_time: string}>")))),(0,r.kt)("h3",{id:"storeoperatinghoursguildid-starttime-endtime-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"storeOperatingHours(guildId, startTime, endTime)")),(0,r.kt)("h4",{id:"async-storeoperatinghoursguildid-starttime-endtime--promisevoid-1"},(0,r.kt)("inlineCode",{parentName:"h4"},"(async) storeOperatingHours(guildId, startTime, endTime) \u2192 {Promise.<void>}")),(0,r.kt)("p",null,"Stores or updates operating hours for a guild in the database."),(0,r.kt)("h5",{id:"parameters-17"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"startTime")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The start time of the operating hours.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"endTime")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The end time of the operating hours.")))),(0,r.kt)("h5",{id:"returns-23"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A Promise that resolves when the operating hours are successfully stored or updated."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<void>")))),(0,r.kt)("h3",{id:"getrandomhourwithinactivehoursactivehoursdata-2"},(0,r.kt)("inlineCode",{parentName:"h3"},"getRandomHourWithinActiveHours(activeHoursData)")),(0,r.kt)("h4",{id:"getrandomhourwithinactivehoursactivehoursdata--string-2"},(0,r.kt)("inlineCode",{parentName:"h4"},"getRandomHourWithinActiveHours(activeHoursData) \u2192 {string}")),(0,r.kt)("p",null,"Generates a random hour within the active operating hours for a guild."),(0,r.kt)("h5",{id:"parameters-18"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"activeHoursData")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"An object containing ",(0,r.kt)("inlineCode",{parentName:"td"},"start_time")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"end_time"),".")))),(0,r.kt)("h5",{id:"returns-24"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A formatted string representing a random hour within the active hours."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"string")))),(0,r.kt)("h2",{id:"blacklistutils-methods"},"blacklistUtils Methods"),(0,r.kt)("h3",{id:"blacklistadduserguildid-dbuser"},(0,r.kt)("inlineCode",{parentName:"h3"},"blacklistAddUser(guildId, dbuser)")),(0,r.kt)("h4",{id:"blacklistadduserguildid-dbuser--promisenumber"},(0,r.kt)("inlineCode",{parentName:"h4"},"blacklistAddUser(guildId, dbuser) \u2192 {Promise<number>}")),(0,r.kt)("p",null,"Adds a user to the blacklist for a guild."),(0,r.kt)("h5",{id:"parameters-19"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"dbuser")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The user ID to be blacklisted.")))),(0,r.kt)("h5",{id:"returns-25"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A Promise resolving to:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0")," if the user was successfully added to the blacklist."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1")," if the user is already blacklisted."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"2")," if an error occurred during the operation.")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<number>")))),(0,r.kt)("h3",{id:"blacklistdeleteuserguildid-dbuser"},(0,r.kt)("inlineCode",{parentName:"h3"},"blacklistDeleteUser(guildId, dbuser)")),(0,r.kt)("h4",{id:"blacklistdeleteuserguildid-dbuser--promisenumber"},(0,r.kt)("inlineCode",{parentName:"h4"},"blacklistDeleteUser(guildId, dbuser) \u2192 {Promise.<number>}")),(0,r.kt)("p",null,"Deletes a user from the blacklist for a guild."),(0,r.kt)("h5",{id:"parameters-20"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"dbuser")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The user ID to be removed from the blacklist.")))),(0,r.kt)("h5",{id:"returns-26"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A Promise resolving to:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0")," if the user is successfully deleted."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1")," if no user is deleted")))),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise.<number>")),(0,r.kt)("h3",{id:"blacklistlistusersguildid"},(0,r.kt)("inlineCode",{parentName:"h3"},"blacklistListUsers(guildId)")),(0,r.kt)("h4",{id:"blacklistlistusersguildid--promisearraystring"},(0,r.kt)("inlineCode",{parentName:"h4"},"blacklistListUsers(guildId) \u2192 {Promise.<Array.<string>>}")),(0,r.kt)("p",null,"Fetches and returns a list of blacklisted users in a guild."),(0,r.kt)("h5",{id:"parameters-21"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")))),(0,r.kt)("h5",{id:"returns-27"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to an array of formatted user mentions (",(0,r.kt)("inlineCode",{parentName:"p"},"<@user_id>"),")."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise.<Array.<string>>")))),(0,r.kt)("h2",{id:"datagraph-methods"},"dataGraph Methods"),(0,r.kt)("h3",{id:"fetchdataforgraphguildid"},(0,r.kt)("inlineCode",{parentName:"h3"},"fetchDataForGraph(guildId)")),(0,r.kt)("h4",{id:"fetchdataforgraphguildid--promisearrayobject"},(0,r.kt)("inlineCode",{parentName:"h4"},"fetchDataForGraph(guildId) \u2192 {Promise.<Array<Object>>}")),(0,r.kt)("p",null,"Fetches data for generating a graph based on reactions in a guild."),(0,r.kt)("h5",{id:"parameters-22"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")))),(0,r.kt)("h5",{id:"returns-28"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to an array of objects containing ",(0,r.kt)("inlineCode",{parentName:"p"},"prompt_text")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"num_reactions"),"."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise.<Array<Object>>")))),(0,r.kt)("h3",{id:"generategraphdata"},(0,r.kt)("inlineCode",{parentName:"h3"},"generateGraph(data)")),(0,r.kt)("h4",{id:"generategraphdata--promisebuffer"},(0,r.kt)("inlineCode",{parentName:"h4"},"generateGraph(data) \u2192 {Promise.<Buffer>}")),(0,r.kt)("p",null,"Generates a bar chart graph using Chart.js based on the provided data."),(0,r.kt)("h5",{id:"parameters-23"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"data")),(0,r.kt)("td",{parentName:"tr",align:null},"Array"),(0,r.kt)("td",{parentName:"tr",align:null},"An array of objects with ",(0,r.kt)("inlineCode",{parentName:"td"},"prompt_text")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"num_reactions"),".")))),(0,r.kt)("h5",{id:"returns-29"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A Promise that resolves to a Buffer containing the rendered graph image."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise.<Buffer>")))),(0,r.kt)("h2",{id:"dbconn-methods-1"},"dbConn Methods"),(0,r.kt)("h3",{id:"createconnectionpoollocal-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"createConnectionPoolLocal()")),(0,r.kt)("h4",{id:"createconnectionpoollocal--object-2"},(0,r.kt)("inlineCode",{parentName:"h4"},"createConnectionPoolLocal() \u2192 {Object}")),(0,r.kt)("p",null,"Creates a connection pool for local database calls during testing."),(0,r.kt)("h5",{id:"returns-30"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"MySQL connection pool object."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")))),(0,r.kt)("h3",{id:"createconnectionpoolcloud-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"createConnectionPoolCloud()")),(0,r.kt)("h4",{id:"createconnectionpoolcloud--object-2"},(0,r.kt)("inlineCode",{parentName:"h4"},"createConnectionPoolCloud() \u2192 {Object}")),(0,r.kt)("p",null,"Creates a connection pool for cloud database calls."),(0,r.kt)("h5",{id:"returns-31"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"An object representing a MySQL connection pool."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")))),(0,r.kt)("h3",{id:"createpromiseconnectionpool-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"createPromiseConnectionPool()")),(0,r.kt)("h4",{id:"createpromiseconnectionpool--object-2"},(0,r.kt)("inlineCode",{parentName:"h4"},"createPromiseConnectionPool() \u2192 {Object}")),(0,r.kt)("p",null,"Creates a promise-based connection pool based on the specified environment flag."),(0,r.kt)("h5",{id:"returns-32"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A Promise-based MySQL connection pool."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")))),(0,r.kt)("h2",{id:"getrandom-methods-1"},"getRandom Methods"),(0,r.kt)("h3",{id:"getrandomuserguild-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"getRandomUser(guild)")),(0,r.kt)("h4",{id:"getrandomuserguild--string--null-1"},(0,r.kt)("inlineCode",{parentName:"h4"},"getRandomUser(guild) \u2192 {string | null}")),(0,r.kt)("p",null,"Generates a random non-blacklisted, non-bot user ID from a guild's members."),(0,r.kt)("h5",{id:"parameters-24"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guild")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The Discord guild object.")))),(0,r.kt)("h5",{id:"returns-33"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A string representing the user ID of a randomly selected non-blacklisted, non-bot user.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," if no eligible non-bot users are found."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"string | null")))),(0,r.kt)("h2",{id:"handleusersubmission-methods"},"handleUserSubmission Methods"),(0,r.kt)("h3",{id:"handleusersubmissionattachment-caption-interaction"},(0,r.kt)("inlineCode",{parentName:"h3"},"handleUserSubmission(attachment, caption, interaction)")),(0,r.kt)("p",null,"Handles user submissions for Discord bot prompts."),(0,r.kt)("h4",{id:"parameters-25"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"attachment")),(0,r.kt)("td",{parentName:"tr",align:null},"Discord.Attachment"),(0,r.kt)("td",{parentName:"tr",align:null},"The file attached to the submission.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"caption")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The optional caption provided by the user.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"interaction")),(0,r.kt)("td",{parentName:"tr",align:null},"Discord.CommandInteraction"),(0,r.kt)("td",{parentName:"tr",align:null},"The interaction object representing the user's command interaction.")))),(0,r.kt)("h4",{id:"execution"},"Execution:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Verifies if the user is prompted and if the prompt matches the user ID."),(0,r.kt)("li",{parentName:"ul"},"Defers and then edits the user's reply to indicate the submission has been received."),(0,r.kt)("li",{parentName:"ul"},"Checks if the attachment is an image."),(0,r.kt)("li",{parentName:"ul"},"Notifies moderators about the submission and waits for their responses.")),(0,r.kt)("h4",{id:"deny-flow"},"Deny Flow:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If a moderator denies the submission, prompts the moderator for a reason and notifies the submitter."),(0,r.kt)("li",{parentName:"ul"},"Tracks denial counts for users and issues warnings."),(0,r.kt)("li",{parentName:"ul"},"If a user reaches a strike limit, adds them to the blacklist and notifies moderators.")),(0,r.kt)("h4",{id:"approval-flow"},"Approval Flow:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If a moderator approves the submission, edits messages accordingly and notifies moderators."),(0,r.kt)("li",{parentName:"ul"},"Sends an embedded message to the specified channel containing the submission details.")),(0,r.kt)("h2",{id:"helputils-methods"},"helpUtils Methods"),(0,r.kt)("h3",{id:"gethelpmessagemod"},(0,r.kt)("inlineCode",{parentName:"h3"},"getHelpMessageMod()")),(0,r.kt)("h4",{id:"gethelpmessagemod--string"},(0,r.kt)("inlineCode",{parentName:"h4"},"getHelpMessageMod() \u2192 {string}")),(0,r.kt)("p",null,"Returns a help message that explains how to use the Bot for Bot moderators."),(0,r.kt)("h5",{id:"returns-34"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A string containing the help message for moderators."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"string")))),(0,r.kt)("h3",{id:"gethelpmessageuser"},(0,r.kt)("inlineCode",{parentName:"h3"},"getHelpMessageUser()")),(0,r.kt)("h4",{id:"gethelpmessageuser--string"},(0,r.kt)("inlineCode",{parentName:"h4"},"getHelpMessageUser() \u2192 {string}")),(0,r.kt)("p",null,"Returns a help message that explains how to use the Bot for Bot users."),(0,r.kt)("h5",{id:"returns-35"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A string containing the help message for regular users."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"string")))),(0,r.kt)("h2",{id:"notifymods-methods"},"notifyMods Methods"),(0,r.kt)("h3",{id:"notifymodsguild-content-caption-author-attachments"},(0,r.kt)("inlineCode",{parentName:"h3"},"notifyMods(guild, content, caption, author, attachments)")),(0,r.kt)("h4",{id:"notifymodsguild-content-caption-author-attachments--object"},(0,r.kt)("inlineCode",{parentName:"h4"},"notifyMods(guild, content, caption, author, attachments) \u2192 {Object}")),(0,r.kt)("p",null,"Notifies moderators in a guild about a new submission and provides options to approve or deny."),(0,r.kt)("h5",{id:"parameters-26"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guild")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The Discord guild object.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"content")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The content or prompt associated with the submission.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"caption")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The caption provided for the submission. (Optional)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"author")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The author of the submission.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"attachments")),(0,r.kt)("td",{parentName:"tr",align:null},"Collection or Array"),(0,r.kt)("td",{parentName:"tr",align:null},"Attachments associated with the submission.")))),(0,r.kt)("h5",{id:"returns-36"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"An object with the following properties:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"responses"),": An array of responses from moderators."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"moderators"),": A collection of moderators who were notified.")))),(0,r.kt)("h2",{id:"postprompt-methods"},"postPrompt Methods"),(0,r.kt)("h3",{id:"postpromptguildid-client-callinguser"},(0,r.kt)("inlineCode",{parentName:"h3"},"postPrompt(guildId, client, callingUser)")),(0,r.kt)("h4",{id:"postpromptguildid-client-callinguser--void"},(0,r.kt)("inlineCode",{parentName:"h4"},"postPrompt(guildId, client, callingUser) \u2192 {void}")),(0,r.kt)("p",null,"Posts a prompt in a specified channel for a user to submit content."),(0,r.kt)("h5",{id:"parameters-27"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"client")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The Discord client object.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"callingUser")),(0,r.kt)("td",{parentName:"tr",align:null},"string (optional)"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the user triggering the prompt.")))),(0,r.kt)("h2",{id:"prompttimeout-methods-1"},"promptTimeout Methods"),(0,r.kt)("h3",{id:"setuppromptchannelid-message-user-originalprompt-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"setupPrompt(channelId, message, user, originalPrompt)")),(0,r.kt)("h4",{id:"setuppromptchannelid-message-user-originalprompt--void-1"},(0,r.kt)("inlineCode",{parentName:"h4"},"setupPrompt(channelId, message, user, originalPrompt) \u2192 {void}")),(0,r.kt)("p",null,"Sets up a timed prompt in a specific channel for user interaction."),(0,r.kt)("h5",{id:"parameters-28"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channelId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord channel where the prompt is set up.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"message")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The message content for the prompt.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"user")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The Discord user object for whom the prompt is set up.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"originalPrompt")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The original prompt object or content for reference.")))),(0,r.kt)("h3",{id:"schedulepostactivehoursdata-guildid-client"},(0,r.kt)("inlineCode",{parentName:"h3"},"schedulePost(activeHoursData, guildId, client)")),(0,r.kt)("h4",{id:"schedulepostactivehoursdata-guildid-client--void"},(0,r.kt)("inlineCode",{parentName:"h4"},"schedulePost(activeHoursData, guildId, client) \u2192 {void}")),(0,r.kt)("p",null,"Schedules the posting of a prompt within active hours of a guild."),(0,r.kt)("h5",{id:"parameters-29"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"activeHoursData")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"An object containing ",(0,r.kt)("inlineCode",{parentName:"td"},"start_time")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"end_time"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"client")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The Discord client object.")))),(0,r.kt)("h2",{id:"prompt-class"},"Prompt Class"),(0,r.kt)("h3",{id:"prompt"},(0,r.kt)("inlineCode",{parentName:"h3"},"Prompt")),(0,r.kt)("h4",{id:"description-4"},"Description:"),(0,r.kt)("p",null,"A class representing a prompt with associated user and channel information."),(0,r.kt)("h5",{id:"properties"},"Properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prompt"),": The content of the prompt."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"userId"),": The ID of the user associated with the prompt."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"channel"),": The channel associated with the prompt.")),(0,r.kt)("h4",{id:"methods-2"},"Methods:"),(0,r.kt)("h5",{id:"isuseridmatchuserid"},(0,r.kt)("inlineCode",{parentName:"h5"},"isUserIdMatch(userId)")),(0,r.kt)("p",null,"Checks if the provided user ID matches the user ID associated with the prompt."),(0,r.kt)("h6",{id:"parameters-30"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"userId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The user ID to compare with.")))),(0,r.kt)("h6",{id:"returns-37"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"true")," if the provided user ID matches the user ID associated with the prompt; otherwise, ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),".")),(0,r.kt)("p",null,"##",(0,r.kt)("strong",{parentName:"p"},"Type:"),"  ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("h5",{id:"setpromptmsg"},(0,r.kt)("inlineCode",{parentName:"h5"},"setPrompt(msg)")),(0,r.kt)("p",null,"Sets the content of the prompt."),(0,r.kt)("h6",{id:"parameters-31"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"msg")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The content of the prompt.")))),(0,r.kt)("h5",{id:"setuseriduserid"},(0,r.kt)("inlineCode",{parentName:"h5"},"setUserId(userId)")),(0,r.kt)("p",null,"Sets the user ID associated with the prompt."),(0,r.kt)("h6",{id:"parameters-32"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"userId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the associated user.")))),(0,r.kt)("h5",{id:"setchannelchannel"},(0,r.kt)("inlineCode",{parentName:"h5"},"setChannel(channel)")),(0,r.kt)("p",null,"Sets the channel associated with the prompt."),(0,r.kt)("h6",{id:"parameters-33"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channel")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The associated channel.")))),(0,r.kt)("h5",{id:"getprompt"},(0,r.kt)("inlineCode",{parentName:"h5"},"getPrompt()")),(0,r.kt)("p",null,"Gets the content of the prompt."),(0,r.kt)("h6",{id:"returns-38"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The content of the prompt.")),(0,r.kt)("p",null,"##",(0,r.kt)("strong",{parentName:"p"},"Type:"),"  ",(0,r.kt)("inlineCode",{parentName:"p"},"string")),(0,r.kt)("h5",{id:"getuserid"},(0,r.kt)("inlineCode",{parentName:"h5"},"getUserId()")),(0,r.kt)("p",null,"Gets the user ID associated with the prompt."),(0,r.kt)("h6",{id:"returns-39"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ID of the associated user.")),(0,r.kt)("p",null,"##",(0,r.kt)("strong",{parentName:"p"},"Type:"),"  ",(0,r.kt)("inlineCode",{parentName:"p"},"string")),(0,r.kt)("h5",{id:"getchannel"},(0,r.kt)("inlineCode",{parentName:"h5"},"getChannel()")),(0,r.kt)("p",null,"Gets the channel associated with the prompt."),(0,r.kt)("h6",{id:"returns-40"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The associated channel.")),(0,r.kt)("p",null,"##",(0,r.kt)("strong",{parentName:"p"},"Type:"),"  ",(0,r.kt)("inlineCode",{parentName:"p"},"string")),(0,r.kt)("h2",{id:"prompttimeout-class"},"promptTimeout Class"),(0,r.kt)("h3",{id:"prompttimeout"},(0,r.kt)("inlineCode",{parentName:"h3"},"PromptTimeout")),(0,r.kt)("p",null,"A utility class managing timeouts for prompts and reprompts."),(0,r.kt)("h3",{id:"constructorclient"},(0,r.kt)("inlineCode",{parentName:"h3"},"constructor(client)")),(0,r.kt)("h4",{id:"description-5"},"Description:"),(0,r.kt)("p",null,"Constructs a new instance of the class."),(0,r.kt)("h5",{id:"parameters-34"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"client")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The Discord.js client instance.")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"methods-3"},"Methods"),(0,r.kt)("h3",{id:"setuppromptchannelid-message-user-originalprompt-2"},(0,r.kt)("inlineCode",{parentName:"h3"},"setupPrompt(channelId, message, user, originalPrompt)")),(0,r.kt)("h4",{id:"setuppromptchannelid-message-user-originalprompt--void-2"},(0,r.kt)("inlineCode",{parentName:"h4"},"setupPrompt(channelId, message, user, originalPrompt) \u2192 {void}")),(0,r.kt)("h4",{id:"description-6"},"Description:"),(0,r.kt)("p",null,"This method sets up the timeout and message for a prompt."),(0,r.kt)("h5",{id:"parameters-35"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channelId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord channel.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"message")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The message content for the prompt.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"user")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The Discord user associated with the prompt.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"originalPrompt")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The original prompt content.")))),(0,r.kt)("h5",{id:"parameters-36"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channelId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord channel.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"message")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The message content for the prompt.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"user")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The Discord user associated with the prompt.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"originalPrompt")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The original prompt content.")))),(0,r.kt)("h3",{id:"setprompttimeoutpromptid-duration-message-expiredcontent-user-originalprompt-channelid-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"setPromptTimeout(promptId, duration, message, expiredContent, user, originalPrompt, channelId)")),(0,r.kt)("h4",{id:"setprompttimeoutpromptid-duration-message-expiredcontent-user-originalprompt-channelid--void-1"},(0,r.kt)("inlineCode",{parentName:"h4"},"setPromptTimeout(promptId, duration, message, expiredContent, user, originalPrompt, channelId) \u2192 {void}")),(0,r.kt)("p",null,"Sets a timeout for a prompt identified by ",(0,r.kt)("inlineCode",{parentName:"p"},"promptId"),"."),(0,r.kt)("h5",{id:"parameters-37"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"promptId")),(0,r.kt)("td",{parentName:"tr",align:null},"any"),(0,r.kt)("td",{parentName:"tr",align:null},"Identifier for the prompt.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"duration")),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"Duration of the timeout in milliseconds.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"message")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"Discord message object associated with the prompt.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"expiredContent")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Content to display when the prompt expires.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"user")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"Discord user object associated with the prompt.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"originalPrompt")),(0,r.kt)("td",{parentName:"tr",align:null},"any"),(0,r.kt)("td",{parentName:"tr",align:null},"Original prompt content.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channelId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"ID of the Discord channel where the prompt is active.")))),(0,r.kt)("h3",{id:"handlerepromptuser-originalprompt-channelid-originalmessage-2"},(0,r.kt)("inlineCode",{parentName:"h3"},"handleReprompt(user, originalPrompt, channelId, originalMessage)")),(0,r.kt)("h4",{id:"handlerepromptuser-originalprompt-channelid-originalmessage-3"},(0,r.kt)("inlineCode",{parentName:"h4"},"handleReprompt(user, originalPrompt, channelId, originalMessage)")),(0,r.kt)("p",null,"Handles reprompting the user."),(0,r.kt)("h5",{id:"parameters-38"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"user")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The user object.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"originalPrompt")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The original prompt message.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channelId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the channel where the reprompt message will be sent.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"originalMessage")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The original message that triggered the reprompt.")))),(0,r.kt)("h2",{id:"promptutils-methods-1"},"promptUtils Methods"),(0,r.kt)("h3",{id:"getpromptsguildid-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"getPrompts(guildId)")),(0,r.kt)("h4",{id:"getpromptsguildid--promisearraystring-1"},(0,r.kt)("inlineCode",{parentName:"h4"},"getPrompts(guildId) \u2192 {Promise<Array.<string>>}")),(0,r.kt)("p",null,"Retrieves a list of prompts for a specified guild from the database."),(0,r.kt)("h5",{id:"parameters-39"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")))),(0,r.kt)("h5",{id:"returns-41"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to an array of prompt texts."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<Array.<string>>")))),(0,r.kt)("h3",{id:"addpromptguildid-prompt-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"addPrompt(guildId, prompt)")),(0,r.kt)("h4",{id:"addpromptguildid-prompt--promisestring-1"},(0,r.kt)("inlineCode",{parentName:"h4"},"addPrompt(guildId, prompt) \u2192 {Promise<string>}")),(0,r.kt)("p",null,"Adds a new prompt to the database for a specified guild."),(0,r.kt)("h5",{id:"parameters-40"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"prompt")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The text of the prompt to be added.")))),(0,r.kt)("h5",{id:"returns-42"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to a message confirming the addition of the prompt."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<string>")))),(0,r.kt)("h3",{id:"deletepromptguildid-prompttodelete-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"deletePrompt(guildId, promptToDelete)")),(0,r.kt)("h4",{id:"deletepromptguildid-prompttodelete--promisestring-1"},(0,r.kt)("inlineCode",{parentName:"h4"},"deletePrompt(guildId, promptToDelete) \u2192 {Promise<string>}")),(0,r.kt)("p",null,"Deletes a prompt from the database for a specified guild."),(0,r.kt)("h5",{id:"parameters-41"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"promptToDelete")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The text of the prompt to be deleted or matched.")))),(0,r.kt)("h5",{id:"returns-43"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to a message confirming the deletion or suggesting similar prompts."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<string>")))),(0,r.kt)("h3",{id:"listpromptsguildid-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"listPrompts(guildId)")),(0,r.kt)("h4",{id:"listpromptsguildid--promisestring-1"},(0,r.kt)("inlineCode",{parentName:"h4"},"listPrompts(guildId) \u2192 {Promise<string>}")),(0,r.kt)("p",null,"Retrieves and lists all prompts for a specified guild."),(0,r.kt)("h5",{id:"parameters-42"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")))),(0,r.kt)("h5",{id:"returns-44"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to a string listing all prompts."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<string>")))),(0,r.kt)("h3",{id:"searchpromptsguildid-query-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"searchPrompts(guildId, query)")),(0,r.kt)("h4",{id:"searchpromptsguildid-query--promisestring-1"},(0,r.kt)("inlineCode",{parentName:"h4"},"searchPrompts(guildId, query) \u2192 {Promise<string>}")),(0,r.kt)("p",null,"Searches for prompts that match a specified query for a specified guild."),(0,r.kt)("h5",{id:"parameters-43"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"query")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The search query.")))),(0,r.kt)("h5",{id:"returns-45"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to a string listing matching prompts or suggesting alternatives."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<string>")))),(0,r.kt)("h3",{id:"getrandompromptguildid-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"getRandomPrompt(guildId)")),(0,r.kt)("h4",{id:"getrandompromptguildid--promisestring--null-1"},(0,r.kt)("inlineCode",{parentName:"h4"},"getRandomPrompt(guildId) \u2192 {Promise<string | null>}")),(0,r.kt)("p",null,"Retrieves a random prompt for a specified guild from the database."),(0,r.kt)("h5",{id:"parameters-44"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")))),(0,r.kt)("h5",{id:"returns-46"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to a random prompt text or ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," if no prompts are found."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<string | null>")))),(0,r.kt)("h3",{id:"getrandomhourwithinactivehoursactivehoursdata-3"},(0,r.kt)("inlineCode",{parentName:"h3"},"getRandomHourWithinActiveHours(activeHoursData)")),(0,r.kt)("h4",{id:"getrandomhourwithinactivehoursactivehoursdata--string-3"},(0,r.kt)("inlineCode",{parentName:"h4"},"getRandomHourWithinActiveHours(activeHoursData) \u2192 {string}")),(0,r.kt)("p",null,"Generates a random hour within the active operating hours for a guild."),(0,r.kt)("h5",{id:"parameters-45"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"activeHoursData")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"An object containing ",(0,r.kt)("inlineCode",{parentName:"td"},"start_time")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"end_time"),".")))),(0,r.kt)("h5",{id:"returns-47"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A formatted string representing a random hour within the active hours."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"string")))),(0,r.kt)("h2",{id:"savedb-methods"},"saveDB Methods"),(0,r.kt)("p",null,"======="),(0,r.kt)("h2",{id:"savedb-methods-1"},"saveDB Methods"),(0,r.kt)("blockquote",null,(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("p",{parentName:"blockquote"},"5d0c1de (working on saveDB documentation)"),(0,r.kt)("h3",{parentName:"blockquote",id:"fetchimagemessagesuntilpromptclient-channelid"},(0,r.kt)("inlineCode",{parentName:"h3"},"fetchImageMessagesUntilPrompt(client, channelId)"))))))))),(0,r.kt)("h4",{id:"fetchimagemessagesuntilpromptclient-channelid--promisearrayobject"},(0,r.kt)("inlineCode",{parentName:"h4"},"fetchImageMessagesUntilPrompt(client, channelId) \u2192 {Promise.<Array.<Object>>}")),(0,r.kt)("p",null,'Fetches image messages from a Discord channel until a message containing "Prompt" is found.'),(0,r.kt)("h5",{id:"parameters-46"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"client")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The Discord client object.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channelId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord channel to fetch messages.")))),(0,r.kt)("h5",{id:"returns-48"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to an array of Discord message objects containing images."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise.<Array.<Object>>")))),(0,r.kt)("p",null,"<<<<<<< HEAD"),(0,r.kt)("p",null,"======="),(0,r.kt)("blockquote",null,(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("p",{parentName:"blockquote"},"5d0c1de (working on saveDB documentation)"),(0,r.kt)("h3",{parentName:"blockquote",id:"countreactionsmessage"},(0,r.kt)("inlineCode",{parentName:"h3"},"countReactions(message)"))))))))),(0,r.kt)("h4",{id:"countreactionsmessage--number"},(0,r.kt)("inlineCode",{parentName:"h4"},"countReactions(message) \u2192 {number}")),(0,r.kt)("p",null,"Counts the total number of reactions on a Discord message."),(0,r.kt)("h5",{id:"parameters-47"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"message")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The Discord message object.")))),(0,r.kt)("h5",{id:"returns-49"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The total count of reactions on the message."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"number")))),(0,r.kt)("p",null,"<<<<<<< HEAD"),(0,r.kt)("p",null,"======="),(0,r.kt)("blockquote",null,(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("p",{parentName:"blockquote"},"5d0c1de (working on saveDB documentation)"),(0,r.kt)("h3",{parentName:"blockquote",id:"getimagelinkfrommessagemessage"},(0,r.kt)("inlineCode",{parentName:"h3"},"getImageLinkFromMessage(message)"))))))))),(0,r.kt)("h4",{id:"getimagelinkfrommessagemessage--string--null"},(0,r.kt)("inlineCode",{parentName:"h4"},"getImageLinkFromMessage(message) \u2192 {string | null}")),(0,r.kt)("p",null,"Extracts the image link from a Discord message, considering both attachments and embeds."),(0,r.kt)("h5",{id:"parameters-48"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"message")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The Discord message object.")))),(0,r.kt)("h5",{id:"returns-50"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A string representing the image link if found; otherwise, returns ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"string | null")))),(0,r.kt)("h3",{id:"insertresponsedatamessagedata"},(0,r.kt)("inlineCode",{parentName:"h3"},"insertResponseData(messageData)")),(0,r.kt)("h4",{id:"async-insertresponsedatamessagedata--void"},(0,r.kt)("inlineCode",{parentName:"h4"},"(async) insertResponseData(messageData) \u2192 {void}")),(0,r.kt)("p",null,"Inserts response data into the database, avoiding duplicates based on the message ID."),(0,r.kt)("h5",{id:"parameters-49"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"messageData")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"Data object for the response.")))),(0,r.kt)("p",null,"<<<<<<< HEAD"),(0,r.kt)("h3",{id:"findtimedifferencetopromptclient-channelid-referencemessage"},(0,r.kt)("inlineCode",{parentName:"h3"},"findTimeDifferenceToPrompt(client, channelId, referenceMessage)")),(0,r.kt)("h4",{id:"async-findtimedifferencetopromptclient-channelid-referencemessage--number--null"},(0,r.kt)("inlineCode",{parentName:"h4"},"(async) findTimeDifferenceToPrompt(client, channelId, referenceMessage) \u2192 {number | null}")),(0,r.kt)("p",null,'Finds the time difference in seconds between a reference message and the first message containing the word "Prompt" within the last 100 messages in a channel.'),(0,r.kt)("h5",{id:"parameters-50"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"client")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The Discord client object.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channelId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the channel.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"referenceMessage")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The reference message object.")))),(0,r.kt)("h5",{id:"returns-51"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A number representing the time difference in seconds if a prompt message is found; otherwise, returns ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"number | null")))),(0,r.kt)("h3",{id:"savedbclient-channelid"},(0,r.kt)("inlineCode",{parentName:"h3"},"saveDB(client, channelId)")),(0,r.kt)("h4",{id:"async-savedbclient-channelid--array"},(0,r.kt)("inlineCode",{parentName:"h4"},"(async) saveDB(client, channelId) \u2192 {Array}")),(0,r.kt)("p",null,"Saves data to the database, including information about image messages, reactions, and time differences to prompts."),(0,r.kt)("h5",{id:"parameters-51"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"client")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"The Discord client object.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channelId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the channel.")))),(0,r.kt)("h5",{id:"returns-52"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"An array containing data for each saved message."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Array")))),(0,r.kt)("h3",{id:"insertresponsedatamessagedata-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"insertResponseData(messageData)")),(0,r.kt)("h4",{id:"async-insertresponsedatamessagedata--void-1"},(0,r.kt)("inlineCode",{parentName:"h4"},"(async) insertResponseData(messageData) \u2192 {void}")),(0,r.kt)("p",null,"Inserts response data into the database, avoiding duplicates based on the message ID."),(0,r.kt)("h5",{id:"parameters-52"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"messageData")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"Data object for the response.")))),(0,r.kt)("h2",{id:"setdefaultchannel-methods"},"setDefaultChannel Methods"),(0,r.kt)("h2",{id:"function"},"Function"),(0,r.kt)("h3",{id:"setdefaultchannelchannelid-guildid"},(0,r.kt)("inlineCode",{parentName:"h3"},"setDefaultChannel(channelId, guildId)")),(0,r.kt)("h4",{id:"description-7"},"Description:"),(0,r.kt)("p",null,"Sets the default channel for submissions in the database. If the channel and guild combination already exists, it updates the submission channel."),(0,r.kt)("h5",{id:"parameters-53"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channelId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord channel.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guildId")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID of the Discord guild.")))),(0,r.kt)("h5",{id:"returns-53"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," on success.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A promise that resolves to ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," on failure."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise.<number>")))),(0,r.kt)("h2",{id:"timer"},(0,r.kt)("inlineCode",{parentName:"h2"},"Timer")),(0,r.kt)("h3",{id:"constructor"},"Constructor"),(0,r.kt)("h4",{id:"constructor-1"},(0,r.kt)("inlineCode",{parentName:"h4"},"constructor()")),(0,r.kt)("h5",{id:"description-8"},"Description:"),(0,r.kt)("p",null,"Constructs a new instance of the Timer class."),(0,r.kt)("h5",{id:"properties-1"},"Properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"startTime")," (null|number): The timestamp when the timer started."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"endTime")," (null|number): The timestamp when the timer stopped.")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"methods-4"},"Methods"),(0,r.kt)("h4",{id:"start"},(0,r.kt)("inlineCode",{parentName:"h4"},"start()")),(0,r.kt)("h5",{id:"description-9"},"Description:"),(0,r.kt)("p",null,"Starts the timer by setting the ",(0,r.kt)("inlineCode",{parentName:"p"},"startTime")," to the current timestamp."),(0,r.kt)("h4",{id:"stop"},(0,r.kt)("inlineCode",{parentName:"h4"},"stop()")),(0,r.kt)("h5",{id:"description-10"},"Description:"),(0,r.kt)("p",null,"Stops the timer by setting the ",(0,r.kt)("inlineCode",{parentName:"p"},"endTime")," to the current timestamp. Calculates and returns the elapsed time in seconds."),(0,r.kt)("h5",{id:"returns-54"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"number"),": Elapsed time in seconds.")),(0,r.kt)("h5",{id:"throws"},"Throws:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Error: If the timer was stopped without being started.")),(0,r.kt)("h4",{id:"isrunning"},(0,r.kt)("inlineCode",{parentName:"h4"},"isRunning()")),(0,r.kt)("h5",{id:"description-11"},"Description:"),(0,r.kt)("p",null,"Checks if the timer is currently running."),(0,r.kt)("h5",{id:"returns-55"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h1",{parentName:"li",id:"boolean-true-if-the-timer-is-running-false-otherwise"},(0,r.kt)("inlineCode",{parentName:"h1"},"boolean"),": ",(0,r.kt)("inlineCode",{parentName:"h1"},"true")," if the timer is running; ",(0,r.kt)("inlineCode",{parentName:"h1"},"false")," otherwise."),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("p",{parentName:"blockquote"},"94595ee (deleted all the original documentation since it wasn't up to date or navigable)")))))))))),(0,r.kt)("p",null,"======="),(0,r.kt)("h5",{id:"returns-56"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"No direct return value.",(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("p",{parentName:"blockquote"},"5d0c1de (working on saveDB documentation)")))))))))))}m.isMDXComponent=!0}}]);